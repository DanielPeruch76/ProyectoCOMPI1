"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProyectoLexer = exports.ProyectoParser = void 0;
const parser_1 = require("@ts-jison/parser");
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
const Tipo = require('./simbolo/Tipo');
const Nativo = require('./expresiones/Nativo');
const Aritmeticas = require('./expresiones/Aritmeticas');
const Relacionales = require('./expresiones/Relacionales');
const AccesoVar = require('./expresiones/AccesoVar');
const Decremento = require('./instrucciones/Decremento');
const Print = require('./instrucciones/Print');
const Declaracion = require('./instrucciones/Declaracion');
const DeclaracionDefecto = require('./instrucciones/DeclaracionDefecto');
const Incremento = require('./instrucciones/Incremento');
const Casteo = require('./instrucciones/Casteo');
const AsignacionVar = require('./instrucciones/AsignacionVar');
const CasteoAsignacion = require('./instrucciones/CasteoAsignacion');
const If = require('./instrucciones/If');
const IfElse = require('./instrucciones/IfElse');
const Elif = require('./instrucciones/Elif');
const While = require('./instrucciones/While');
const Break = require('./instrucciones/Break');
const Continue = require('./instrucciones/Continue');
const Metodo = require('./instrucciones/Metodo');
const Llamada = require('./instrucciones/Llamada');
const Run = require('./instrucciones/Run');
const ObjetoMatch = require('./instrucciones/ObjetoMatch');
const MatchDefault = require('./instrucciones/MatchDefault');
const Match = require('./instrucciones/Match');
const Default = require('./instrucciones/Default');
const For = require('./instrucciones/For');
const DoWhile = require('./instrucciones/DoWhile');
const Loop = require('./instrucciones/Loop');
const DeclaracionVector = require('./instrucciones/DeclaracionVector');
const Funcion = require('./instrucciones/Funcion');
const Return = require('./instrucciones/Return');
const DeclaracionMatriz = require('./instrucciones/DeclaracionMatriz');
const DeclaracionMatrizDefecto = require('./instrucciones/DeclaracionMatrizDefecto');
const DeclararArregloDefecto = require('./instrucciones/DeclararArregloDefecto');
const AsignacionVector = require('./instrucciones/AsignacionVector');
const AsignacionMatriz = require('./instrucciones/AsignacionMatriz');
const AccesoVector = require('./instrucciones/AccesoVector');
const AccesoMatriz = require('./instrucciones/AccesoMatriz');
const IfTernario = require('./instrucciones/IfTernario');
const ReturnDefault = require('./instrucciones/ReturnDefault');
class ProyectoParser extends parser_1.JisonParser {
    constructor(yy = {}, lexer = new ProyectoLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = { "error": 2, "INICIO": 3, "INSTRUCCIONES": 4, "EOF": 5, "INSTRUCCION": 6, "IMPRESION": 7, "PUNTOCOMA": 8, "DECLARACION": 9, "MULTIPLEDECLARACION": 10, "ASIGNACION": 11, "INCREMENTO": 12, "DECREMENTO": 13, "SIF": 14, "SBREAK": 15, "SCONTINUE": 16, "SRETURN": 17, "SRETURNSOLO": 18, "SDO": 19, "SWHILE": 20, "SLOOP": 21, "SFOR": 22, "SSWITCH": 23, "METODO": 24, "FUNCIONES": 25, "EJECUTAR": 26, "LLAMADA": 27, "TKPRINT": 28, "EXPRESION": 29, "ID": 30, "MAS": 31, "MENOS": 32, "MUTABILIDAD": 33, "LISTAID": 34, "DOSPUNTOS": 35, "TIPOS": 36, "IGUAL": 37, "CAST": 38, "PAR1": 39, "AS": 40, "PAR2": 41, "COR1": 42, "COR2": 43, "NEW": 44, "VECTOR": 45, "LISTAMATRIZ": 46, "LISTAVECTOR": 47, "SIFTERNARIO": 48, "COMA": 49, "VALORESMATRIZ": 50, "SWITCH": 51, "LLAVE1": 52, "INSTRUCCIONESMATCH": 53, "LLAVE2": 54, "DEFAULT": 55, "FOR": 56, "ACTUALIZARFOR": 57, "LOOP": 58, "SENTENCIAMATCH": 59, "CASE": 60, "IF": 61, "ELSE": 62, "WHILE": 63, "DO": 64, "UNTIL": 65, "BREAK": 66, "CONTINUE": 67, "RETURN": 68, "FUNCTION": 69, "VOID": 70, "PARAMS": 71, "PARAM": 72, "RUN": 73, "PARAMSCALL": 74, "PARAMCALL": 75, "MULTIPLICACION": 76, "DIVISION": 77, "POTENCIA": 78, "RAIZ": 79, "MODULO": 80, "RELACIONALES": 81, "ENTERO": 82, "DECIMAL": 83, "CADENA": 84, "TRUE": 85, "FALSE": 86, "CHAR": 87, "NULL": 88, "MENOR": 89, "NEGACION": 90, "MAYOR": 91, "AND": 92, "OR": 93, "LET": 94, "CONST": 95, "INT": 96, "DOUBLE": 97, "STRING": 98, "BOOL": 99, "CARACTER": 100, "$accept": 0, "$end": 1 };
        this.terminals_ = { 2: "error", 5: "EOF", 8: "PUNTOCOMA", 28: "TKPRINT", 30: "ID", 31: "MAS", 32: "MENOS", 35: "DOSPUNTOS", 37: "IGUAL", 38: "CAST", 39: "PAR1", 40: "AS", 41: "PAR2", 42: "COR1", 43: "COR2", 44: "NEW", 45: "VECTOR", 49: "COMA", 51: "SWITCH", 52: "LLAVE1", 54: "LLAVE2", 55: "DEFAULT", 56: "FOR", 58: "LOOP", 60: "CASE", 61: "IF", 62: "ELSE", 63: "WHILE", 64: "DO", 65: "UNTIL", 66: "BREAK", 67: "CONTINUE", 68: "RETURN", 69: "FUNCTION", 70: "VOID", 73: "RUN", 76: "MULTIPLICACION", 77: "DIVISION", 78: "POTENCIA", 79: "RAIZ", 80: "MODULO", 82: "ENTERO", 83: "DECIMAL", 84: "CADENA", 85: "TRUE", 86: "FALSE", 87: "CHAR", 88: "NULL", 89: "MENOR", 90: "NEGACION", 91: "MAYOR", 92: "AND", 93: "OR", 94: "LET", 95: "CONST", 96: "INT", 97: "DOUBLE", 98: "STRING", 99: "BOOL", 100: "CARACTER" };
        this.productions_ = [0, [3, 2], [4, 2], [4, 1], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [6, 1], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 2], [6, 2], [7, 2], [12, 3], [13, 3], [9, 6], [9, 11], [9, 13], [9, 18], [9, 12], [9, 8], [9, 6], [46, 3], [46, 1], [47, 3], [50, 3], [50, 1], [10, 4], [34, 3], [34, 1], [11, 3], [11, 8], [11, 6], [11, 9], [11, 3], [23, 7], [23, 10], [23, 9], [22, 11], [22, 11], [21, 4], [57, 3], [57, 3], [57, 3], [53, 2], [53, 1], [59, 4], [14, 7], [14, 11], [14, 9], [48, 7], [20, 7], [19, 8], [15, 1], [16, 1], [17, 2], [18, 1], [24, 9], [24, 8], [25, 9], [25, 8], [71, 3], [71, 1], [72, 5], [72, 3], [26, 5], [26, 4], [27, 4], [27, 3], [74, 3], [74, 1], [75, 3], [29, 2], [29, 3], [29, 3], [29, 3], [29, 3], [29, 3], [29, 3], [29, 3], [29, 1], [29, 3], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 1], [29, 4], [29, 7], [81, 3], [81, 4], [81, 4], [81, 4], [81, 3], [81, 4], [81, 3], [81, 3], [81, 2], [33, 1], [33, 1], [36, 1], [36, 1], [36, 1], [36, 1], [36, 1], [36, 1]];
        this.defaultActions = { 28: [2, 65], 29: [2, 66], 38: [2, 114], 39: [2, 115], 40: [2, 1], 113: [2, 46], 116: [2, 25], 117: [2, 26], 170: [2, 78], 197: [2, 77], 201: [2, 33], 250: [2, 32], 253: [2, 43], 257: [2, 64], 282: [2, 54], 283: [2, 55], 301: [2, 28], 312: [2, 31], 314: [2, 29], 321: [2, 30] };
        // shorten static method to just `o` for terse STATE_TABLE
        const $V0 = [1, 24], $V1 = [1, 26], $V2 = [1, 35], $V3 = [1, 34], $V4 = [1, 33], $V5 = [1, 27], $V6 = [1, 32], $V7 = [1, 31], $V8 = [1, 28], $V9 = [1, 29], $Va = [1, 30], $Vb = [1, 36], $Vc = [1, 37], $Vd = [1, 38], $Ve = [1, 39], $Vf = [5, 28, 30, 51, 54, 55, 56, 58, 60, 61, 63, 64, 66, 67, 68, 69, 73, 94, 95], $Vg = [1, 59], $Vh = [1, 56], $Vi = [1, 58], $Vj = [1, 60], $Vk = [1, 61], $Vl = [1, 62], $Vm = [1, 63], $Vn = [1, 64], $Vo = [1, 65], $Vp = [1, 66], $Vq = [1, 68], $Vr = [1, 70], $Vs = [1, 71], $Vt = [1, 75], $Vu = [1, 72], $Vv = [1, 90], $Vw = [1, 85], $Vx = [1, 86], $Vy = [1, 87], $Vz = [1, 88], $VA = [1, 89], $VB = [1, 92], $VC = [1, 93], $VD = [1, 100], $VE = [1, 94], $VF = [1, 95], $VG = [1, 96], $VH = [1, 97], $VI = [1, 98], $VJ = [1, 99], $VK = [1, 101], $VL = [1, 102], $VM = [1, 103], $VN = [1, 104], $VO = [8, 31, 32, 35, 37, 40, 41, 43, 49, 76, 77, 78, 79, 80, 89, 90, 91, 92, 93], $VP = [1, 110], $VQ = [35, 49], $VR = [1, 114], $VS = [1, 121], $VT = [8, 30, 37, 41, 42, 49], $VU = [8, 31, 32, 35, 37, 40, 41, 43, 49, 89, 90, 91, 92, 93], $VV = [8, 35, 40, 41, 43, 49, 92, 93], $VW = [1, 157], $VX = [41, 49], $VY = [8, 31, 32, 35, 37, 40, 41, 43, 49, 76, 77, 80, 89, 90, 91, 92, 93], $VZ = [8, 35, 37, 40, 41, 43, 49, 89, 90, 91, 92, 93], $V_ = [1, 176], $V$ = [1, 177], $V01 = [1, 194], $V11 = [8, 35, 40, 41, 43, 49, 90, 92, 93], $V21 = [1, 216], $V31 = [1, 218], $V41 = [1, 234], $V51 = [54, 55, 60], $V61 = [1, 251], $V71 = [43, 49];
        const o = parser_1.JisonParser.expandParseTable;
        this.table = [{ 3: 1, 4: 2, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 1: [3] }, { 5: [1, 40], 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($Vf, [2, 3]), { 8: [1, 42] }, { 8: [1, 43] }, { 8: [1, 44] }, { 8: [1, 45] }, { 8: [1, 46] }, { 8: [1, 47] }, o($Vf, [2, 10]), { 8: [1, 48] }, { 8: [1, 49] }, { 8: [1, 50] }, { 8: [1, 51] }, { 8: [1, 52] }, o($Vf, [2, 16]), o($Vf, [2, 17]), o($Vf, [2, 18]), o($Vf, [2, 19]), o($Vf, [2, 20]), o($Vf, [2, 21]), { 8: [1, 53] }, { 8: [1, 54] }, { 27: 67, 29: 55, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 30: $Vr, 34: 69 }, { 31: [1, 73], 32: [1, 74], 37: $Vs, 39: $Vt, 42: $Vu }, { 39: [1, 76] }, { 8: [2, 65] }, { 8: [2, 66] }, { 8: [2, 68], 27: 67, 29: 77, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 52: [1, 78] }, { 39: [1, 79] }, { 52: [1, 80] }, { 39: [1, 81] }, { 39: [1, 82] }, { 36: 84, 70: [1, 83], 88: $Vv, 96: $Vw, 97: $Vx, 98: $Vy, 99: $Vz, 100: $VA }, { 30: [1, 91] }, { 30: [2, 114] }, { 30: [2, 115] }, { 1: [2, 1] }, o($Vf, [2, 2]), o($Vf, [2, 4]), o($Vf, [2, 5]), o($Vf, [2, 6]), o($Vf, [2, 7]), o($Vf, [2, 8]), o($Vf, [2, 9]), o($Vf, [2, 11]), o($Vf, [2, 12]), o($Vf, [2, 13]), o($Vf, [2, 14]), o($Vf, [2, 15]), o($Vf, [2, 22]), o($Vf, [2, 23]), { 8: [2, 24], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 27: 67, 29: 105, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($VO, [2, 92]), { 27: 67, 29: 106, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($VO, [2, 94], { 39: $Vt, 42: [1, 107] }), o($VO, [2, 95]), o($VO, [2, 96]), o($VO, [2, 97]), o($VO, [2, 98]), o($VO, [2, 99]), o($VO, [2, 100]), o($VO, [2, 101]), o($VO, [2, 102]), { 27: 67, 29: 108, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 35: [1, 109], 49: $VP }, o($VQ, [2, 41]), { 27: 67, 29: 111, 30: $Vg, 32: $Vh, 38: [1, 112], 39: $Vi, 48: 113, 61: $VR, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 115, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 31: [1, 116] }, { 32: [1, 117] }, { 30: $VS, 41: [1, 119], 74: 118, 75: 120 }, { 27: 67, 29: 122, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 8: [2, 67], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 4: 123, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 27: 67, 29: 124, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 4: 125, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 9: 127, 11: 126, 30: [1, 128], 33: 129, 94: $Vd, 95: $Ve }, { 27: 67, 29: 130, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 30: [1, 131] }, { 30: [1, 132] }, o($VT, [2, 116]), o($VT, [2, 117]), o($VT, [2, 118]), o($VT, [2, 119]), o($VT, [2, 120]), o($VT, [2, 121]), { 39: [1, 133] }, { 27: 67, 29: 134, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 135, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 136, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 137, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 138, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 139, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 140, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 141, 30: $Vg, 32: $Vh, 37: [1, 142], 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 37: [1, 143] }, { 37: [1, 144] }, { 27: 67, 29: 145, 30: $Vg, 32: $Vh, 37: [1, 146], 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 147, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 148, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($VU, [2, 84], { 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI }), { 31: $VB, 32: $VC, 37: $VD, 41: [1, 149], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 27: 67, 29: 150, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($VV, [2, 113], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL }), { 36: 151, 88: $Vv, 96: $Vw, 97: $Vx, 98: $Vy, 99: $Vz, 100: $VA }, { 30: [1, 152] }, { 8: [2, 42], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 39: [1, 153] }, { 8: [2, 46] }, { 39: [1, 154] }, { 31: $VB, 32: $VC, 37: $VD, 43: [1, 155], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 8: [2, 25] }, { 8: [2, 26] }, { 41: [1, 156], 49: $VW }, o($VO, [2, 80]), o($VX, [2, 82]), { 37: [1, 158] }, { 31: $VB, 32: $VC, 37: $VD, 41: [1, 159], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 160], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 31: $VB, 32: $VC, 37: $VD, 41: [1, 161], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 162], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 8: [1, 163] }, { 8: [1, 164] }, { 37: $Vs, 42: $Vu }, { 30: $Vr, 34: 165 }, { 31: $VB, 32: $VC, 37: $VD, 41: [1, 166], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 39: [1, 167] }, { 39: [1, 168] }, { 30: $VS, 41: [1, 170], 74: 169, 75: 120 }, o($VU, [2, 85], { 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI }), o($VU, [2, 86], { 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI }), o($VY, [2, 87], { 78: $VG, 79: $VH }), o($VY, [2, 88], { 78: $VG, 79: $VH }), o($VO, [2, 89]), o($VO, [2, 90]), o($VY, [2, 91], { 78: $VG, 79: $VH }), o($VZ, [2, 105], { 31: $VB, 32: $VC, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI }), { 27: 67, 29: 171, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 172, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 173, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($VZ, [2, 109], { 31: $VB, 32: $VC, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI }), { 27: 67, 29: 174, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($VV, [2, 111], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL }), o([8, 35, 40, 41, 43, 49, 93], [2, 112], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM }), o($VO, [2, 93]), { 31: $VB, 32: $VC, 37: $VD, 43: [1, 175], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 8: [2, 39], 37: $V_, 42: $V$ }, o($VQ, [2, 40]), { 27: 67, 29: 178, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 179, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 37: [1, 180], 42: [1, 181] }, o($VO, [2, 79]), { 30: $VS, 75: 182 }, { 27: 67, 29: 183, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 52: [1, 184] }, { 65: [1, 185] }, { 52: [1, 186] }, o($Vf, [2, 52]), { 27: 67, 29: 187, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 188, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 35: [1, 189], 49: $VP }, { 52: [1, 190] }, { 30: $V01, 41: [1, 192], 71: 191, 72: 193 }, { 30: $V01, 41: [1, 196], 71: 195, 72: 193 }, { 41: [1, 197], 49: $VW }, { 8: [2, 78] }, o($VZ, [2, 108], { 31: $VB, 32: $VC, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI }), o($V11, [2, 106], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 91: $VL }), o($V11, [2, 107], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 91: $VL }), o($VZ, [2, 110], { 31: $VB, 32: $VC, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI }), o($VO, [2, 103], { 42: [1, 198] }), { 27: 67, 29: 199, 30: $Vg, 32: $Vh, 38: [1, 200], 39: $Vi, 48: 201, 61: $VR, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 43: [1, 202] }, { 31: $VB, 32: $VC, 37: $VD, 40: [1, 203], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 31: $VB, 32: $VC, 37: $VD, 41: [1, 204], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 27: 67, 29: 205, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 206, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($VX, [2, 81]), o($VX, [2, 83], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }), { 4: 207, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 39: [1, 208] }, { 4: 209, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 8: [1, 210], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 8: [1, 211], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 36: 212, 88: $Vv, 96: $Vw, 97: $Vx, 98: $Vy, 99: $Vz, 100: $VA }, { 53: 213, 55: [1, 214], 59: 215, 60: $V21 }, { 41: [1, 217], 49: $V31 }, { 52: [1, 219] }, o($VX, [2, 74]), { 35: [1, 220] }, { 41: [1, 221], 49: $V31 }, { 52: [1, 222] }, { 8: [2, 77] }, { 27: 67, 29: 223, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 8: [2, 27], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 39: [1, 224] }, { 8: [2, 33] }, { 37: [1, 225], 42: [1, 226] }, { 36: 227, 88: $Vv, 96: $Vw, 97: $Vx, 98: $Vy, 99: $Vz, 100: $VA }, { 27: 67, 29: 228, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 8: [2, 44], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 31: $VB, 32: $VC, 37: $VD, 43: [1, 229], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 230], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 27: 67, 29: 231, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 232], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 30: $V41, 57: 233 }, { 30: $V41, 57: 235 }, { 37: $V_, 42: $V$ }, { 54: [1, 236], 55: [1, 237], 59: 238, 60: $V21 }, { 35: [1, 239] }, o($V51, [2, 57]), { 27: 67, 29: 240, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 52: [1, 241] }, { 30: $V01, 72: 242 }, { 4: 243, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 36: 244, 88: $Vv, 96: $Vw, 97: $Vx, 98: $Vy, 99: $Vz, 100: $VA }, { 52: [1, 245] }, { 4: 246, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 31: $VB, 32: $VC, 37: $VD, 43: [1, 247], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 27: 67, 29: 248, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 42: $V61, 44: [1, 249], 47: 250 }, { 43: [1, 252] }, { 41: [1, 253] }, { 31: $VB, 32: $VC, 35: [1, 254], 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 37: [1, 255] }, o($Vf, [2, 59], { 62: [1, 256] }), { 31: $VB, 32: $VC, 37: $VD, 41: [1, 257], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, o($Vf, [2, 63]), { 41: [1, 258] }, { 31: [1, 260], 32: [1, 261], 37: [1, 259] }, { 41: [1, 262] }, o($Vf, [2, 47]), { 35: [1, 263] }, o($V51, [2, 56]), { 4: 264, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 31: $VB, 32: $VC, 35: [1, 265], 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 4: 266, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($VX, [2, 73]), { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 267], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($VX, [2, 76], { 37: [1, 268] }), { 4: 269, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 270], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($VO, [2, 104]), { 31: $VB, 32: $VC, 37: $VD, 40: [1, 271], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 45: [1, 272] }, { 8: [2, 32] }, { 27: 67, 29: 274, 30: $Vg, 32: $Vh, 39: $Vi, 50: 273, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 37: [1, 275] }, { 8: [2, 43] }, { 27: 67, 29: 276, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 27: 67, 29: 277, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 14: 279, 52: [1, 278], 61: $V5 }, { 8: [2, 64] }, { 52: [1, 280] }, { 27: 67, 29: 281, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 31: [1, 282] }, { 32: [1, 283] }, { 52: [1, 284] }, { 4: 285, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 286], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 4: 287, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 288], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($Vf, [2, 70]), { 27: 67, 29: 289, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 290], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($Vf, [2, 72]), { 36: 291, 88: $Vv, 96: $Vw, 97: $Vx, 98: $Vy, 99: $Vz, 100: $VA }, { 36: 292, 88: $Vv, 96: $Vw, 97: $Vx, 98: $Vy, 99: $Vz, 100: $VA }, { 43: [1, 293], 49: [1, 294] }, o($V71, [2, 38], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }), { 42: [1, 296], 44: [1, 295] }, { 8: [2, 62], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 8: [2, 45], 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 4: 297, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($Vf, [2, 61]), { 4: 298, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 31: $VB, 32: $VC, 37: $VD, 41: [2, 53], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 41: [2, 54] }, { 41: [2, 55] }, { 4: 299, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 300], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($Vf, [2, 49]), o($V51, [2, 58], { 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 33: 25, 6: 41, 28: $V0, 30: $V1, 51: $V2, 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }), o($Vf, [2, 69]), o($VX, [2, 75], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }), o($Vf, [2, 71]), { 41: [1, 301] }, { 42: [1, 302] }, o([8, 43, 49], [2, 36]), { 27: 67, 29: 303, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 45: [1, 304] }, { 42: $V61, 46: 305, 47: 306 }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 307], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 308], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, { 6: 41, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: $V0, 30: $V1, 33: 25, 51: $V2, 54: [1, 309], 56: $V3, 58: $V4, 61: $V5, 63: $V6, 64: $V7, 66: $V8, 67: $V9, 68: $Va, 69: $Vb, 73: $Vc, 94: $Vd, 95: $Ve }, o($Vf, [2, 48]), { 8: [2, 28] }, { 27: 67, 29: 310, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($V71, [2, 37], { 31: $VB, 32: $VC, 37: $VD, 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }), { 36: 311, 88: $Vv, 96: $Vw, 97: $Vx, 98: $Vy, 99: $Vz, 100: $VA }, { 43: [1, 312], 49: [1, 313] }, o($V71, [2, 35]), o($Vf, [2, 60]), o($Vf, [2, 50]), o($Vf, [2, 51]), { 31: $VB, 32: $VC, 37: $VD, 43: [1, 314], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 42: [1, 315] }, { 8: [2, 31] }, { 42: $V61, 47: 316 }, { 8: [2, 29] }, { 27: 67, 29: 317, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, o($V71, [2, 34]), { 31: $VB, 32: $VC, 37: $VD, 43: [1, 318], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 42: [1, 319] }, { 27: 67, 29: 320, 30: $Vg, 32: $Vh, 39: $Vi, 81: 57, 82: $Vj, 83: $Vk, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 90: $Vq }, { 31: $VB, 32: $VC, 37: $VD, 43: [1, 321], 76: $VE, 77: $VF, 78: $VG, 79: $VH, 80: $VI, 89: $VJ, 90: $VK, 91: $VL, 92: $VM, 93: $VN }, { 8: [2, 30] }];
    }
    performAction(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
        /* this == yyval */
        var $0 = $$.length - 1;
        switch (yystate) {
            case 1:
                return $$[$0 - 1];
                break;
            case 2:
            case 56:
                $$[$0 - 1].push($$[$0]);
                this.$ = $$[$0 - 1];
                break;
            case 3:
            case 35:
            case 38:
            case 41:
            case 57:
            case 74:
            case 82:
                this.$ = [$$[$0]];
                break;
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 22:
            case 23:
            case 36:
            case 93:
                this.$ = $$[$0 - 1];
                break;
            case 10:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
                this.$ = $$[$0];
                break;
            case 24:
                this.$ = new Print.default($$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 25:
            case 54:
                this.$ = new Incremento.default($$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 26:
            case 55:
                this.$ = new Decremento.default($$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 27:
            case 33:
                this.$ = new Declaracion.default($$[$0 - 2], _$[$0 - 5].first_line, _$[$0 - 5].first_column, $$[$0 - 4][0], $$[$0], $$[$0 - 5]);
                break;
            case 28:
                this.$ = new Casteo.default($$[$0 - 7], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column, $$[$0 - 9][0], $$[$0 - 3], $$[$0 - 10]);
                break;
            case 29:
                this.$ = new DeclaracionVector.default($$[$0 - 9], _$[$0 - 12].first_line, _$[$0 - 12].first_column, $$[$0 - 12], $$[$0 - 11][0], $$[$0 - 3], $$[$0 - 1]);
                break;
            case 30:
                this.$ = new DeclaracionMatriz.default($$[$0 - 14], _$[$0 - 17].first_line, _$[$0 - 17].first_column, $$[$0 - 17], $$[$0 - 16][0], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
                break;
            case 31:
                this.$ = new DeclaracionMatrizDefecto.default($$[$0 - 8], _$[$0 - 11].first_line, _$[$0 - 11].first_column, $$[$0 - 11], $$[$0 - 10][0], $$[$0 - 1]);
                break;
            case 32:
                this.$ = new DeclararArregloDefecto.default($$[$0 - 4], _$[$0 - 7].first_line, _$[$0 - 7].first_column, $$[$0 - 7], $$[$0 - 6][0], $$[$0]);
                break;
            case 34:
            case 37:
            case 40:
            case 73:
            case 81:
                $$[$0 - 2].push($$[$0]);
                this.$ = $$[$0 - 2];
                break;
            case 39:
                this.$ = new DeclaracionDefecto.default($$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column, $$[$0 - 2], $$[$0 - 3]);
                break;
            case 42:
            case 46:
            case 53:
                this.$ = new AsignacionVar.default($$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 43:
                this.$ = new CasteoAsignacion.default($$[$0 - 7], $$[$0 - 1], $$[$0 - 3], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 44:
                this.$ = new AsignacionVector.default($$[$0 - 5], $$[$0 - 3], $$[$0], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                break;
            case 45:
                this.$ = new AsignacionMatriz.default($$[$0 - 8], $$[$0 - 6], $$[$0 - 3], $$[$0], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 47:
                this.$ = new Match.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 48:
                this.$ = new MatchDefault.default($$[$0 - 7], $$[$0 - 4], $$[$0 - 1], _$[$0 - 9].first_line, _$[$0 - 9].first_column);
                break;
            case 49:
                this.$ = new Default.default($$[$0 - 1], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 50:
            case 51:
                this.$ = new For.default($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column);
                break;
            case 52:
                this.$ = new Loop.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 58:
                this.$ = new ObjetoMatch.default($$[$0 - 2], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 59:
                this.$ = new If.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 60:
                this.$ = new IfElse.default($$[$0 - 8], $$[$0 - 5], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column);
                break;
            case 61:
                this.$ = new Elif.default($$[$0 - 6], $$[$0 - 3], $$[$0], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 62:
                this.$ = new IfTernario.default($$[$0 - 4], $$[$0 - 2], $$[$0], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 63:
                this.$ = new While.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 64:
                this.$ = new DoWhile.default($$[$0 - 1], $$[$0 - 5], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 65:
                this.$ = new Break.default(_$[$0].first_line, _$[$0].first_column);
                break;
            case 66:
                this.$ = new Continue.default(_$[$0].first_line, _$[$0].first_column);
                break;
            case 67:
                this.$ = new Return.default($$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 68:
                this.$ = new ReturnDefault.default(_$[$0].first_line, _$[$0].first_column);
                break;
            case 69:
                this.$ = new Metodo.default(new Tipo.default(Tipo.tipoDato.VOID), $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 70:
                this.$ = new Metodo.default(new Tipo.default(Tipo.tipoDato.VOID), $$[$0 - 5], [], $$[$0 - 1], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 71:
                this.$ = new Funcion.default($$[$0 - 7], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], $$[$0 - 7], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 72:
                this.$ = new Funcion.default($$[$0 - 6], $$[$0 - 5], [], $$[$0 - 1], $$[$0 - 6], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 75:
                this.$ = { tipo: $$[$0 - 2], id: $$[$0 - 4], valor: $$[$0] };
                break;
            case 76:
                this.$ = { tipo: $$[$0], id: $$[$0 - 2], valor: null };
                break;
            case 77:
                this.$ = new Run.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                break;
            case 78:
                this.$ = new Run.default($$[$0 - 2], [], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 79:
                this.$ = new Llamada.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 80:
                this.$ = new Llamada.default($$[$0 - 2], [], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 83:
                this.$ = { id: $$[$0 - 2], valor: $$[$0] };
                break;
            case 84:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.UNARIA, _$[$0 - 1].first_line, _$[$0 - 1].first_column, $$[$0], $$[$0]);
                break;
            case 85:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 86:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 87:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 88:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 89:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 90:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RAIZ, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 91:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 92:
            case 102:
                this.$ = $$[$0];
                break;
            case 94:
                this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 95:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 96:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 97:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 98:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true, _$[$0].first_line, _$[$0].first_column);
                break;
            case 99:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false, _$[$0].first_line, _$[$0].first_column);
                break;
            case 100:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CHAR), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 101:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.NULL), null, _$[$0].first_line, _$[$0].first_column);
                break;
            case 103:
                this.$ = new AccesoVector.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 104:
                this.$ = new AccesoMatriz.default($$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 105:
                this.$ = new Relacionales.default(Relacionales.Relacional.MENOR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 106:
                this.$ = new Relacionales.default(Relacionales.Relacional.IGUALDAD, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 107:
                this.$ = new Relacionales.default(Relacionales.Relacional.DIFERENTE, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 108:
                this.$ = new Relacionales.default(Relacionales.Relacional.MENORIGUAL, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 109:
                this.$ = new Relacionales.default(Relacionales.Relacional.MAYOR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 110:
                this.$ = new Relacionales.default(Relacionales.Relacional.MAYORIGUAL, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 111:
                this.$ = new Relacionales.default(Relacionales.Relacional.AND, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 112:
                this.$ = new Relacionales.default(Relacionales.Relacional.OR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 113:
                this.$ = new Relacionales.default(Relacionales.Relacional.NOT, $$[$0], $$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 114:
                this.$ = "let";
                break;
            case 115:
                this.$ = "const";
                break;
            case 116:
                this.$ = new Tipo.default(Tipo.tipoDato.ENTERO);
                break;
            case 117:
                this.$ = new Tipo.default(Tipo.tipoDato.DECIMAL);
                break;
            case 118:
                this.$ = new Tipo.default(Tipo.tipoDato.STRING);
                break;
            case 119:
                this.$ = new Tipo.default(Tipo.tipoDato.BOOL);
                break;
            case 120:
                this.$ = new Tipo.default(Tipo.tipoDato.CHAR);
                break;
            case 121:
                this.$ = new Tipo.default(Tipo.tipoDato.NULL);
                break;
        }
    }
}
exports.ProyectoParser = ProyectoParser;
/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const lexer_1 = require("@ts-jison/lexer");
class ProyectoLexer extends lexer_1.JisonLexer {
    constructor(yy = {}) {
        super(yy);
        this.options = { "case-insensitive": true, "moduleName": "Proyecto" };
        this.rules = [
            /^(?:[/][/][^\n]*)/i,
            /^(?:[/][*](?:[^*]|\*[^/])*[*][/])/i,
            /^(?:int\b)/i,
            /^(?:double\b)/i,
            /^(?:string\b)/i,
            /^(?:char\b)/i,
            /^(?:echo\b)/i,
            /^(?:if\b)/i,
            /^(?:else\b)/i,
            /^(?:false\b)/i,
            /^(?:true\b)/i,
            /^(?:bool\b)/i,
            /^(?:while\b)/i,
            /^(?:for\b)/i,
            /^(?:ejecutar\b)/i,
            /^(?:void\b)/i,
            /^(?:let\b)/i,
            /^(?:const\b)/i,
            /^(?:cast\b)/i,
            /^(?:as\b)/i,
            /^(?:break\b)/i,
            /^(?:continue\b)/i,
            /^(?:switch\b)/i,
            /^(?:case\b)/i,
            /^(?:default\b)/i,
            /^(?:do\b)/i,
            /^(?:until\b)/i,
            /^(?:loop\b)/i,
            /^(?:new\b)/i,
            /^(?:vector\b)/i,
            /^(?:function\b)/i,
            /^(?:return\b)/i,
            /^(?:null\b)/i,
            /^(?:;)/i,
            /^(?::)/i,
            /^(?:\+)/i,
            /^(?:-)/i,
            /^(?:\*)/i,
            /^(?:\/)/i,
            /^(?:\^)/i,
            /^(?:\$)/i,
            /^(?:%)/i,
            /^(?:\()/i,
            /^(?:\))/i,
            /^(?:\[)/i,
            /^(?:\])/i,
            /^(?:=)/i,
            /^(?:\{)/i,
            /^(?:\})/i,
            /^(?:<)/i,
            /^(?:>)/i,
            /^(?:!)/i,
            /^(?:&&)/i,
            /^(?:\|\|)/i,
            /^(?:,)/i,
            /^(?:[0-9]+\.[0-9]+)/i,
            /^(?:[0-9]+)/i,
            /^(?:[\"][^\"]*[\"])/i,
            /^(?:[\'](?:[^\'\\]|\\[ntr]|[\\][\\]|[\\][\'])[\'])/i,
            /^(?:[a-z][a-z0-9_]*)/i,
            /^(?:[\ \r\t\f])/i,
            /^(?:[\ \n])/i,
            /^(?:$)/i,
            /^(?:)/i
        ];
        this.conditions = { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "inclusive": true } };
    }
    performAction(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                return 96;
                break;
            case 3:
                return 97;
                break;
            case 4:
                return 98;
                break;
            case 5:
                return 100;
                break;
            case 6:
                return 28;
                break;
            case 7:
                return 61;
                break;
            case 8:
                return 62;
                break;
            case 9:
                return 86;
                break;
            case 10:
                return 85;
                break;
            case 11:
                return 99;
                break;
            case 12:
                return 63;
                break;
            case 13:
                return 56;
                break;
            case 14:
                return 73;
                break;
            case 15:
                return 70;
                break;
            case 16:
                return 94;
                break;
            case 17:
                return 95;
                break;
            case 18:
                return 38;
                break;
            case 19:
                return 40;
                break;
            case 20:
                return 66;
                break;
            case 21:
                return 67;
                break;
            case 22:
                return 51;
                break;
            case 23:
                return 60;
                break;
            case 24:
                return 55;
                break;
            case 25:
                return 64;
                break;
            case 26:
                return 65;
                break;
            case 27:
                return 58;
                break;
            case 28:
                return 44;
                break;
            case 29:
                return 45;
                break;
            case 30:
                return 69;
                break;
            case 31:
                return 68;
                break;
            case 32:
                return 88;
                break;
            case 33:
                return 8;
                break;
            case 34:
                return 35;
                break;
            case 35:
                return 31;
                break;
            case 36:
                return 32;
                break;
            case 37:
                return 76;
                break;
            case 38:
                return 77;
                break;
            case 39:
                return 78;
                break;
            case 40:
                return 79;
                break;
            case 41:
                return 80;
                break;
            case 42:
                return 39;
                break;
            case 43:
                return 41;
                break;
            case 44:
                return 42;
                break;
            case 45:
                return 43;
                break;
            case 46:
                return 37;
                break;
            case 47:
                return 52;
                break;
            case 48:
                return 54;
                break;
            case 49:
                return 89;
                break;
            case 50:
                return 91;
                break;
            case 51:
                return 90;
                break;
            case 52:
                return 92;
                break;
            case 53:
                return 93;
                break;
            case 54:
                return 49;
                break;
            case 55:
                return 83;
                break;
            case 56:
                return 82;
                break;
            case 57:
                yy_.yytext = yy_.yytext.substring(1, yy_.yyleng - 1);
                return "CADENA";
                break;
            case 58:
                yy_.yytext = yy_.yytext.substring(1, yy_.yyleng - 1);
                return "CHAR";
                break;
            case 59:
                return 30;
                break;
            case 60:
                break;
            case 61:
                break;
            case 62:
                return 5;
                break;
            case 63:
                break;
        }
    }
}
exports.ProyectoLexer = ProyectoLexer;
