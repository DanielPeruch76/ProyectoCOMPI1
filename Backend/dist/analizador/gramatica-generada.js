"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProyectoLexer = exports.ProyectoParser = void 0;
const parser_1 = require("@ts-jison/parser");
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
const Tipo = require('./simbolo/Tipo');
const Nativo = require('./expresiones/Nativo');
const Aritmeticas = require('./expresiones/Aritmeticas');
const Relacionales = require('./expresiones/Relacionales');
const AccesoVar = require('./expresiones/AccesoVar');
const Decremento = require('./instrucciones/Decremento');
const Print = require('./instrucciones/Print');
const Declaracion = require('./instrucciones/Declaracion');
const DeclaracionDefecto = require('./instrucciones/DeclaracionDefecto');
const Incremento = require('./instrucciones/Incremento');
const Casteo = require('./instrucciones/Casteo');
const AsignacionVar = require('./instrucciones/AsignacionVar');
const CasteoAsignacion = require('./instrucciones/CasteoAsignacion');
const If = require('./instrucciones/If');
const IfElse = require('./instrucciones/IfElse');
const Elif = require('./instrucciones/Elif');
const While = require('./instrucciones/While');
const Break = require('./instrucciones/Break');
const Continue = require('./instrucciones/Continue');
const Metodo = require('./instrucciones/Metodo');
const Llamada = require('./instrucciones/Llamada');
const Run = require('./instrucciones/Run');
const ObjetoMatch = require('./instrucciones/ObjetoMatch');
const MatchDefault = require('./instrucciones/MatchDefault');
const Match = require('./instrucciones/Match');
const Default = require('./instrucciones/Default');
const For = require('./instrucciones/For');
const DoWhile = require('./instrucciones/DoWhile');
const Loop = require('./instrucciones/Loop');
const DeclaracionVector = require('./instrucciones/DeclaracionVector');
const Funcion = require('./instrucciones/Funcion');
const Return = require('./instrucciones/Return');
const DeclaracionMatriz = require('./instrucciones/DeclaracionMatriz');
const DeclaracionMatrizDefecto = require('./instrucciones/DeclaracionMatrizDefecto');
const DeclararArregloDefecto = require('./instrucciones/DeclararArregloDefecto');
const AsignacionVector = require('./instrucciones/AsignacionVector');
const AsignacionMatriz = require('./instrucciones/AsignacionMatriz');
const AccesoVector = require('./instrucciones/AccesoVector');
const AccesoMatriz = require('./instrucciones/AccesoMatriz');
const IfTernario = require('./instrucciones/IfTernario');
class ProyectoParser extends parser_1.JisonParser {
    constructor(yy = {}, lexer = new ProyectoLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = { "error": 2, "INICIO": 3, "INSTRUCCIONES": 4, "EOF": 5, "INSTRUCCION": 6, "IMPRESION": 7, "PUNTOCOMA": 8, "DECLARACION": 9, "MULTIPLEDECLARACION": 10, "ASIGNACION": 11, "INCREMENTO": 12, "DECREMENTO": 13, "SIF": 14, "SBREAK": 15, "SCONTINUE": 16, "SRETURN": 17, "SDO": 18, "SWHILE": 19, "SLOOP": 20, "SFOR": 21, "SSWITCH": 22, "METODO": 23, "FUNCIONES": 24, "EJECUTAR": 25, "LLAMADA": 26, "TKPRINT": 27, "EXPRESION": 28, "ID": 29, "MAS": 30, "MENOS": 31, "MUTABILIDAD": 32, "LISTAID": 33, "DOSPUNTOS": 34, "TIPOS": 35, "IGUAL": 36, "CAST": 37, "PAR1": 38, "AS": 39, "PAR2": 40, "COR1": 41, "COR2": 42, "NEW": 43, "VECTOR": 44, "LISTAMATRIZ": 45, "LISTAVECTOR": 46, "SIFTERNARIO": 47, "COMA": 48, "VALORESMATRIZ": 49, "SWITCH": 50, "LLAVE1": 51, "INSTRUCCIONESMATCH": 52, "LLAVE2": 53, "DEFAULT": 54, "FOR": 55, "ACTUALIZARFOR": 56, "LOOP": 57, "SENTENCIAMATCH": 58, "CASE": 59, "IF": 60, "ELSE": 61, "WHILE": 62, "DO": 63, "UNTIL": 64, "BREAK": 65, "CONTINUE": 66, "RETURN": 67, "FUNCTION": 68, "VOID": 69, "PARAMS": 70, "PARAM": 71, "RUN": 72, "PARAMSCALL": 73, "PARAMCALL": 74, "MULTIPLICACION": 75, "DIVISION": 76, "POTENCIA": 77, "RAIZ": 78, "MODULO": 79, "RELACIONALES": 80, "ENTERO": 81, "DECIMAL": 82, "CADENA": 83, "TRUE": 84, "FALSE": 85, "CHAR": 86, "NULL": 87, "MENOR": 88, "NEGACION": 89, "MAYOR": 90, "AND": 91, "OR": 92, "LET": 93, "CONST": 94, "INT": 95, "DOUBLE": 96, "STRING": 97, "BOOL": 98, "CARACTER": 99, "$accept": 0, "$end": 1 };
        this.terminals_ = { 2: "error", 5: "EOF", 8: "PUNTOCOMA", 27: "TKPRINT", 29: "ID", 30: "MAS", 31: "MENOS", 34: "DOSPUNTOS", 36: "IGUAL", 37: "CAST", 38: "PAR1", 39: "AS", 40: "PAR2", 41: "COR1", 42: "COR2", 43: "NEW", 44: "VECTOR", 48: "COMA", 50: "SWITCH", 51: "LLAVE1", 53: "LLAVE2", 54: "DEFAULT", 55: "FOR", 57: "LOOP", 59: "CASE", 60: "IF", 61: "ELSE", 62: "WHILE", 63: "DO", 64: "UNTIL", 65: "BREAK", 66: "CONTINUE", 67: "RETURN", 68: "FUNCTION", 69: "VOID", 72: "RUN", 75: "MULTIPLICACION", 76: "DIVISION", 77: "POTENCIA", 78: "RAIZ", 79: "MODULO", 81: "ENTERO", 82: "DECIMAL", 83: "CADENA", 84: "TRUE", 85: "FALSE", 86: "CHAR", 87: "NULL", 88: "MENOR", 89: "NEGACION", 90: "MAYOR", 91: "AND", 92: "OR", 93: "LET", 94: "CONST", 95: "INT", 96: "DOUBLE", 97: "STRING", 98: "BOOL", 99: "CARACTER" };
        this.productions_ = [0, [3, 2], [4, 2], [4, 1], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [6, 1], [6, 2], [6, 2], [6, 2], [6, 2], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 2], [6, 2], [7, 2], [12, 3], [13, 3], [9, 6], [9, 11], [9, 13], [9, 18], [9, 12], [9, 8], [9, 6], [45, 3], [45, 1], [46, 3], [49, 3], [49, 1], [10, 4], [33, 3], [33, 1], [11, 3], [11, 8], [11, 6], [11, 9], [11, 3], [22, 7], [22, 10], [22, 9], [21, 11], [21, 11], [20, 4], [56, 3], [56, 3], [56, 3], [52, 2], [52, 1], [58, 4], [14, 7], [14, 11], [14, 9], [47, 7], [19, 7], [18, 8], [15, 1], [16, 1], [17, 2], [23, 9], [23, 8], [24, 9], [24, 8], [70, 3], [70, 1], [71, 5], [71, 3], [25, 5], [25, 4], [26, 4], [26, 3], [73, 3], [73, 1], [74, 3], [28, 2], [28, 3], [28, 3], [28, 3], [28, 3], [28, 3], [28, 3], [28, 3], [28, 1], [28, 3], [28, 1], [28, 1], [28, 1], [28, 1], [28, 1], [28, 1], [28, 1], [28, 1], [28, 1], [28, 4], [28, 7], [80, 3], [80, 4], [80, 4], [80, 4], [80, 3], [80, 4], [80, 3], [80, 3], [80, 2], [32, 1], [32, 1], [35, 1], [35, 1], [35, 1], [35, 1], [35, 1], [35, 1]];
        this.defaultActions = { 27: [2, 64], 28: [2, 65], 37: [2, 112], 38: [2, 113], 39: [2, 1], 111: [2, 45], 114: [2, 24], 115: [2, 25], 168: [2, 76], 195: [2, 75], 199: [2, 32], 248: [2, 31], 251: [2, 42], 255: [2, 63], 280: [2, 53], 281: [2, 54], 299: [2, 27], 310: [2, 30], 312: [2, 28], 319: [2, 29] };
        // shorten static method to just `o` for terse STATE_TABLE
        const $V0 = [1, 23], $V1 = [1, 25], $V2 = [1, 34], $V3 = [1, 33], $V4 = [1, 32], $V5 = [1, 26], $V6 = [1, 31], $V7 = [1, 30], $V8 = [1, 27], $V9 = [1, 28], $Va = [1, 29], $Vb = [1, 35], $Vc = [1, 36], $Vd = [1, 37], $Ve = [1, 38], $Vf = [5, 27, 29, 50, 53, 54, 55, 57, 59, 60, 62, 63, 65, 66, 67, 68, 72, 93, 94], $Vg = [1, 57], $Vh = [1, 54], $Vi = [1, 56], $Vj = [1, 58], $Vk = [1, 59], $Vl = [1, 60], $Vm = [1, 61], $Vn = [1, 62], $Vo = [1, 63], $Vp = [1, 64], $Vq = [1, 66], $Vr = [1, 68], $Vs = [1, 69], $Vt = [1, 73], $Vu = [1, 70], $Vv = [1, 88], $Vw = [1, 83], $Vx = [1, 84], $Vy = [1, 85], $Vz = [1, 86], $VA = [1, 87], $VB = [1, 90], $VC = [1, 91], $VD = [1, 98], $VE = [1, 92], $VF = [1, 93], $VG = [1, 94], $VH = [1, 95], $VI = [1, 96], $VJ = [1, 97], $VK = [1, 99], $VL = [1, 100], $VM = [1, 101], $VN = [1, 102], $VO = [8, 30, 31, 34, 36, 39, 40, 42, 48, 75, 76, 77, 78, 79, 88, 89, 90, 91, 92], $VP = [1, 108], $VQ = [34, 48], $VR = [1, 112], $VS = [1, 119], $VT = [8, 29, 36, 40, 41, 48], $VU = [8, 30, 31, 34, 36, 39, 40, 42, 48, 88, 89, 90, 91, 92], $VV = [8, 34, 39, 40, 42, 48, 91, 92], $VW = [1, 155], $VX = [40, 48], $VY = [8, 30, 31, 34, 36, 39, 40, 42, 48, 75, 76, 79, 88, 89, 90, 91, 92], $VZ = [8, 34, 36, 39, 40, 42, 48, 88, 89, 90, 91, 92], $V_ = [1, 174], $V$ = [1, 175], $V01 = [1, 192], $V11 = [8, 34, 39, 40, 42, 48, 89, 91, 92], $V21 = [1, 214], $V31 = [1, 216], $V41 = [1, 232], $V51 = [53, 54, 59], $V61 = [1, 249], $V71 = [42, 48];
        const o = parser_1.JisonParser.expandParseTable;
        this.table = [{ 3: 1, 4: 2, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 1: [3] }, { 5: [1, 39], 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($Vf, [2, 3]), { 8: [1, 41] }, { 8: [1, 42] }, { 8: [1, 43] }, { 8: [1, 44] }, { 8: [1, 45] }, { 8: [1, 46] }, o($Vf, [2, 10]), { 8: [1, 47] }, { 8: [1, 48] }, { 8: [1, 49] }, { 8: [1, 50] }, o($Vf, [2, 15]), o($Vf, [2, 16]), o($Vf, [2, 17]), o($Vf, [2, 18]), o($Vf, [2, 19]), o($Vf, [2, 20]), { 8: [1, 51] }, { 8: [1, 52] }, { 26: 65, 28: 53, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 29: $Vr, 33: 67 }, { 30: [1, 71], 31: [1, 72], 36: $Vs, 38: $Vt, 41: $Vu }, { 38: [1, 74] }, { 8: [2, 64] }, { 8: [2, 65] }, { 26: 65, 28: 75, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 51: [1, 76] }, { 38: [1, 77] }, { 51: [1, 78] }, { 38: [1, 79] }, { 38: [1, 80] }, { 35: 82, 69: [1, 81], 87: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 98: $Vz, 99: $VA }, { 29: [1, 89] }, { 29: [2, 112] }, { 29: [2, 113] }, { 1: [2, 1] }, o($Vf, [2, 2]), o($Vf, [2, 4]), o($Vf, [2, 5]), o($Vf, [2, 6]), o($Vf, [2, 7]), o($Vf, [2, 8]), o($Vf, [2, 9]), o($Vf, [2, 11]), o($Vf, [2, 12]), o($Vf, [2, 13]), o($Vf, [2, 14]), o($Vf, [2, 21]), o($Vf, [2, 22]), { 8: [2, 23], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 26: 65, 28: 103, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($VO, [2, 90]), { 26: 65, 28: 104, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($VO, [2, 92], { 38: $Vt, 41: [1, 105] }), o($VO, [2, 93]), o($VO, [2, 94]), o($VO, [2, 95]), o($VO, [2, 96]), o($VO, [2, 97]), o($VO, [2, 98]), o($VO, [2, 99]), o($VO, [2, 100]), { 26: 65, 28: 106, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 34: [1, 107], 48: $VP }, o($VQ, [2, 40]), { 26: 65, 28: 109, 29: $Vg, 31: $Vh, 37: [1, 110], 38: $Vi, 47: 111, 60: $VR, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 113, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 30: [1, 114] }, { 31: [1, 115] }, { 29: $VS, 40: [1, 117], 73: 116, 74: 118 }, { 26: 65, 28: 120, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 8: [2, 66], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 4: 121, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 26: 65, 28: 122, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 4: 123, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 9: 125, 11: 124, 29: [1, 126], 32: 127, 93: $Vd, 94: $Ve }, { 26: 65, 28: 128, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 29: [1, 129] }, { 29: [1, 130] }, o($VT, [2, 114]), o($VT, [2, 115]), o($VT, [2, 116]), o($VT, [2, 117]), o($VT, [2, 118]), o($VT, [2, 119]), { 38: [1, 131] }, { 26: 65, 28: 132, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 133, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 134, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 135, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 136, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 137, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 138, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 139, 29: $Vg, 31: $Vh, 36: [1, 140], 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 36: [1, 141] }, { 36: [1, 142] }, { 26: 65, 28: 143, 29: $Vg, 31: $Vh, 36: [1, 144], 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 145, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 146, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($VU, [2, 82], { 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI }), { 30: $VB, 31: $VC, 36: $VD, 40: [1, 147], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 26: 65, 28: 148, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($VV, [2, 111], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL }), { 35: 149, 87: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 98: $Vz, 99: $VA }, { 29: [1, 150] }, { 8: [2, 41], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 38: [1, 151] }, { 8: [2, 45] }, { 38: [1, 152] }, { 30: $VB, 31: $VC, 36: $VD, 42: [1, 153], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 8: [2, 24] }, { 8: [2, 25] }, { 40: [1, 154], 48: $VW }, o($VO, [2, 78]), o($VX, [2, 80]), { 36: [1, 156] }, { 30: $VB, 31: $VC, 36: $VD, 40: [1, 157], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 158], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 30: $VB, 31: $VC, 36: $VD, 40: [1, 159], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 160], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 8: [1, 161] }, { 8: [1, 162] }, { 36: $Vs, 41: $Vu }, { 29: $Vr, 33: 163 }, { 30: $VB, 31: $VC, 36: $VD, 40: [1, 164], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 38: [1, 165] }, { 38: [1, 166] }, { 29: $VS, 40: [1, 168], 73: 167, 74: 118 }, o($VU, [2, 83], { 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI }), o($VU, [2, 84], { 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI }), o($VY, [2, 85], { 77: $VG, 78: $VH }), o($VY, [2, 86], { 77: $VG, 78: $VH }), o($VO, [2, 87]), o($VO, [2, 88]), o($VY, [2, 89], { 77: $VG, 78: $VH }), o($VZ, [2, 103], { 30: $VB, 31: $VC, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI }), { 26: 65, 28: 169, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 170, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 171, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($VZ, [2, 107], { 30: $VB, 31: $VC, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI }), { 26: 65, 28: 172, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($VV, [2, 109], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL }), o([8, 34, 39, 40, 42, 48, 92], [2, 110], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM }), o($VO, [2, 91]), { 30: $VB, 31: $VC, 36: $VD, 42: [1, 173], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 8: [2, 38], 36: $V_, 41: $V$ }, o($VQ, [2, 39]), { 26: 65, 28: 176, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 177, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 36: [1, 178], 41: [1, 179] }, o($VO, [2, 77]), { 29: $VS, 74: 180 }, { 26: 65, 28: 181, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 51: [1, 182] }, { 64: [1, 183] }, { 51: [1, 184] }, o($Vf, [2, 51]), { 26: 65, 28: 185, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 186, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 34: [1, 187], 48: $VP }, { 51: [1, 188] }, { 29: $V01, 40: [1, 190], 70: 189, 71: 191 }, { 29: $V01, 40: [1, 194], 70: 193, 71: 191 }, { 40: [1, 195], 48: $VW }, { 8: [2, 76] }, o($VZ, [2, 106], { 30: $VB, 31: $VC, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI }), o($V11, [2, 104], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 90: $VL }), o($V11, [2, 105], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 90: $VL }), o($VZ, [2, 108], { 30: $VB, 31: $VC, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI }), o($VO, [2, 101], { 41: [1, 196] }), { 26: 65, 28: 197, 29: $Vg, 31: $Vh, 37: [1, 198], 38: $Vi, 47: 199, 60: $VR, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 42: [1, 200] }, { 30: $VB, 31: $VC, 36: $VD, 39: [1, 201], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 30: $VB, 31: $VC, 36: $VD, 40: [1, 202], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 26: 65, 28: 203, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 204, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($VX, [2, 79]), o($VX, [2, 81], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }), { 4: 205, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 38: [1, 206] }, { 4: 207, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 8: [1, 208], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 8: [1, 209], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 35: 210, 87: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 98: $Vz, 99: $VA }, { 52: 211, 54: [1, 212], 58: 213, 59: $V21 }, { 40: [1, 215], 48: $V31 }, { 51: [1, 217] }, o($VX, [2, 72]), { 34: [1, 218] }, { 40: [1, 219], 48: $V31 }, { 51: [1, 220] }, { 8: [2, 75] }, { 26: 65, 28: 221, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 8: [2, 26], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 38: [1, 222] }, { 8: [2, 32] }, { 36: [1, 223], 41: [1, 224] }, { 35: 225, 87: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 98: $Vz, 99: $VA }, { 26: 65, 28: 226, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 8: [2, 43], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 30: $VB, 31: $VC, 36: $VD, 42: [1, 227], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 228], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 26: 65, 28: 229, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 230], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 29: $V41, 56: 231 }, { 29: $V41, 56: 233 }, { 36: $V_, 41: $V$ }, { 53: [1, 234], 54: [1, 235], 58: 236, 59: $V21 }, { 34: [1, 237] }, o($V51, [2, 56]), { 26: 65, 28: 238, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 51: [1, 239] }, { 29: $V01, 71: 240 }, { 4: 241, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 35: 242, 87: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 98: $Vz, 99: $VA }, { 51: [1, 243] }, { 4: 244, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 30: $VB, 31: $VC, 36: $VD, 42: [1, 245], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 26: 65, 28: 246, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 41: $V61, 43: [1, 247], 46: 248 }, { 42: [1, 250] }, { 40: [1, 251] }, { 30: $VB, 31: $VC, 34: [1, 252], 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 36: [1, 253] }, o($Vf, [2, 58], { 61: [1, 254] }), { 30: $VB, 31: $VC, 36: $VD, 40: [1, 255], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, o($Vf, [2, 62]), { 40: [1, 256] }, { 30: [1, 258], 31: [1, 259], 36: [1, 257] }, { 40: [1, 260] }, o($Vf, [2, 46]), { 34: [1, 261] }, o($V51, [2, 55]), { 4: 262, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 30: $VB, 31: $VC, 34: [1, 263], 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 4: 264, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($VX, [2, 71]), { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 265], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($VX, [2, 74], { 36: [1, 266] }), { 4: 267, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 268], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($VO, [2, 102]), { 30: $VB, 31: $VC, 36: $VD, 39: [1, 269], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 44: [1, 270] }, { 8: [2, 31] }, { 26: 65, 28: 272, 29: $Vg, 31: $Vh, 38: $Vi, 49: 271, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 36: [1, 273] }, { 8: [2, 42] }, { 26: 65, 28: 274, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 26: 65, 28: 275, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 14: 277, 51: [1, 276], 60: $V5 }, { 8: [2, 63] }, { 51: [1, 278] }, { 26: 65, 28: 279, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 30: [1, 280] }, { 31: [1, 281] }, { 51: [1, 282] }, { 4: 283, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 284], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 4: 285, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 286], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($Vf, [2, 68]), { 26: 65, 28: 287, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 288], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($Vf, [2, 70]), { 35: 289, 87: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 98: $Vz, 99: $VA }, { 35: 290, 87: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 98: $Vz, 99: $VA }, { 42: [1, 291], 48: [1, 292] }, o($V71, [2, 37], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }), { 41: [1, 294], 43: [1, 293] }, { 8: [2, 61], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 8: [2, 44], 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 4: 295, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($Vf, [2, 60]), { 4: 296, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 30: $VB, 31: $VC, 36: $VD, 40: [2, 52], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 40: [2, 53] }, { 40: [2, 54] }, { 4: 297, 6: 3, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 298], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($Vf, [2, 48]), o($V51, [2, 57], { 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 32: 24, 6: 40, 27: $V0, 29: $V1, 50: $V2, 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }), o($Vf, [2, 67]), o($VX, [2, 73], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }), o($Vf, [2, 69]), { 40: [1, 299] }, { 41: [1, 300] }, o([8, 42, 48], [2, 35]), { 26: 65, 28: 301, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 44: [1, 302] }, { 41: $V61, 45: 303, 46: 304 }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 305], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 306], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, { 6: 40, 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: $V0, 29: $V1, 32: 24, 50: $V2, 53: [1, 307], 55: $V3, 57: $V4, 60: $V5, 62: $V6, 63: $V7, 65: $V8, 66: $V9, 67: $Va, 68: $Vb, 72: $Vc, 93: $Vd, 94: $Ve }, o($Vf, [2, 47]), { 8: [2, 27] }, { 26: 65, 28: 308, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($V71, [2, 36], { 30: $VB, 31: $VC, 36: $VD, 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }), { 35: 309, 87: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 98: $Vz, 99: $VA }, { 42: [1, 310], 48: [1, 311] }, o($V71, [2, 34]), o($Vf, [2, 59]), o($Vf, [2, 49]), o($Vf, [2, 50]), { 30: $VB, 31: $VC, 36: $VD, 42: [1, 312], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 41: [1, 313] }, { 8: [2, 30] }, { 41: $V61, 46: 314 }, { 8: [2, 28] }, { 26: 65, 28: 315, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, o($V71, [2, 33]), { 30: $VB, 31: $VC, 36: $VD, 42: [1, 316], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 41: [1, 317] }, { 26: 65, 28: 318, 29: $Vg, 31: $Vh, 38: $Vi, 80: 55, 81: $Vj, 82: $Vk, 83: $Vl, 84: $Vm, 85: $Vn, 86: $Vo, 87: $Vp, 89: $Vq }, { 30: $VB, 31: $VC, 36: $VD, 42: [1, 319], 75: $VE, 76: $VF, 77: $VG, 78: $VH, 79: $VI, 88: $VJ, 89: $VK, 90: $VL, 91: $VM, 92: $VN }, { 8: [2, 29] }];
    }
    performAction(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
        /* this == yyval */
        var $0 = $$.length - 1;
        switch (yystate) {
            case 1:
                return $$[$0 - 1];
                break;
            case 2:
            case 55:
                $$[$0 - 1].push($$[$0]);
                this.$ = $$[$0 - 1];
                break;
            case 3:
            case 34:
            case 37:
            case 40:
            case 56:
            case 72:
            case 80:
                this.$ = [$$[$0]];
                break;
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 11:
            case 12:
            case 13:
            case 14:
            case 21:
            case 22:
            case 35:
            case 91:
                this.$ = $$[$0 - 1];
                break;
            case 10:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
                this.$ = $$[$0];
                break;
            case 23:
                this.$ = new Print.default($$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 24:
            case 53:
                this.$ = new Incremento.default($$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 25:
            case 54:
                this.$ = new Decremento.default($$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 26:
            case 32:
                this.$ = new Declaracion.default($$[$0 - 2], _$[$0 - 5].first_line, _$[$0 - 5].first_column, $$[$0 - 4][0], $$[$0], $$[$0 - 5]);
                break;
            case 27:
                this.$ = new Casteo.default($$[$0 - 7], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column, $$[$0 - 9][0], $$[$0 - 3], $$[$0 - 10]);
                break;
            case 28:
                this.$ = new DeclaracionVector.default($$[$0 - 9], _$[$0 - 12].first_line, _$[$0 - 12].first_column, $$[$0 - 12], $$[$0 - 11][0], $$[$0 - 3], $$[$0 - 1]);
                break;
            case 29:
                this.$ = new DeclaracionMatriz.default($$[$0 - 14], _$[$0 - 17].first_line, _$[$0 - 17].first_column, $$[$0 - 17], $$[$0 - 16][0], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
                break;
            case 30:
                this.$ = new DeclaracionMatrizDefecto.default($$[$0 - 8], _$[$0 - 11].first_line, _$[$0 - 11].first_column, $$[$0 - 11], $$[$0 - 10][0], $$[$0 - 1]);
                break;
            case 31:
                this.$ = new DeclararArregloDefecto.default($$[$0 - 4], _$[$0 - 7].first_line, _$[$0 - 7].first_column, $$[$0 - 7], $$[$0 - 6][0], $$[$0]);
                break;
            case 33:
            case 36:
            case 39:
            case 71:
            case 79:
                $$[$0 - 2].push($$[$0]);
                this.$ = $$[$0 - 2];
                break;
            case 38:
                this.$ = new DeclaracionDefecto.default($$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column, $$[$0 - 2], $$[$0 - 3]);
                break;
            case 41:
            case 45:
            case 52:
                this.$ = new AsignacionVar.default($$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 42:
                this.$ = new CasteoAsignacion.default($$[$0 - 7], $$[$0 - 1], $$[$0 - 3], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 43:
                this.$ = new AsignacionVector.default($$[$0 - 5], $$[$0 - 3], $$[$0], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                break;
            case 44:
                this.$ = new AsignacionMatriz.default($$[$0 - 8], $$[$0 - 6], $$[$0 - 3], $$[$0], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 46:
                this.$ = new Match.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 47:
                this.$ = new MatchDefault.default($$[$0 - 7], $$[$0 - 4], $$[$0 - 1], _$[$0 - 9].first_line, _$[$0 - 9].first_column);
                break;
            case 48:
                this.$ = new Default.default($$[$0 - 1], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 49:
            case 50:
                this.$ = new For.default($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column);
                break;
            case 51:
                this.$ = new Loop.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 57:
                this.$ = new ObjetoMatch.default($$[$0 - 2], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 58:
                this.$ = new If.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 59:
                this.$ = new IfElse.default($$[$0 - 8], $$[$0 - 5], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column);
                break;
            case 60:
                this.$ = new Elif.default($$[$0 - 6], $$[$0 - 3], $$[$0], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 61:
                this.$ = new IfTernario.default($$[$0 - 4], $$[$0 - 2], $$[$0], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 62:
                this.$ = new While.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 63:
                this.$ = new DoWhile.default($$[$0 - 1], $$[$0 - 5], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 64:
                this.$ = new Break.default(_$[$0].first_line, _$[$0].first_column);
                break;
            case 65:
                this.$ = new Continue.default(_$[$0].first_line, _$[$0].first_column);
                break;
            case 66:
                this.$ = new Return.default($$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 67:
                this.$ = new Metodo.default(new Tipo.default(Tipo.tipoDato.VOID), $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 68:
                this.$ = new Metodo.default(new Tipo.default(Tipo.tipoDato.VOID), $$[$0 - 5], [], $$[$0 - 1], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 69:
                this.$ = new Funcion.default($$[$0 - 7], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], $$[$0 - 7], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 70:
                this.$ = new Funcion.default($$[$0 - 6], $$[$0 - 5], [], $$[$0 - 1], $$[$0 - 6], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 73:
                this.$ = { tipo: $$[$0 - 2], id: $$[$0 - 4], valor: $$[$0] };
                break;
            case 74:
                this.$ = { tipo: $$[$0], id: $$[$0 - 2], valor: null };
                break;
            case 75:
                this.$ = new Run.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                break;
            case 76:
                this.$ = new Run.default($$[$0 - 2], [], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 77:
                this.$ = new Llamada.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 78:
                this.$ = new Llamada.default($$[$0 - 2], [], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 81:
                this.$ = { id: $$[$0 - 2], valor: $$[$0] };
                break;
            case 82:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.UNARIA, _$[$0 - 1].first_line, _$[$0 - 1].first_column, $$[$0], $$[$0]);
                break;
            case 83:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 84:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 85:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 86:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 87:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 88:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RAIZ, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 89:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 90:
            case 100:
                this.$ = $$[$0];
                break;
            case 92:
                this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 93:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 94:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 95:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 96:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true, _$[$0].first_line, _$[$0].first_column);
                break;
            case 97:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false, _$[$0].first_line, _$[$0].first_column);
                break;
            case 98:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CHAR), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 99:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.NULL), null, _$[$0].first_line, _$[$0].first_column);
                break;
            case 101:
                this.$ = new AccesoVector.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 102:
                this.$ = new AccesoMatriz.default($$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 103:
                this.$ = new Relacionales.default(Relacionales.Relacional.MENOR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 104:
                this.$ = new Relacionales.default(Relacionales.Relacional.IGUALDAD, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 105:
                this.$ = new Relacionales.default(Relacionales.Relacional.DIFERENTE, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 106:
                this.$ = new Relacionales.default(Relacionales.Relacional.MENORIGUAL, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 107:
                this.$ = new Relacionales.default(Relacionales.Relacional.MAYOR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 108:
                this.$ = new Relacionales.default(Relacionales.Relacional.MAYORIGUAL, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 109:
                this.$ = new Relacionales.default(Relacionales.Relacional.AND, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 110:
                this.$ = new Relacionales.default(Relacionales.Relacional.OR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 111:
                this.$ = new Relacionales.default(Relacionales.Relacional.NOT, $$[$0], $$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 112:
                this.$ = "let";
                break;
            case 113:
                this.$ = "const";
                break;
            case 114:
                this.$ = new Tipo.default(Tipo.tipoDato.ENTERO);
                break;
            case 115:
                this.$ = new Tipo.default(Tipo.tipoDato.DECIMAL);
                break;
            case 116:
                this.$ = new Tipo.default(Tipo.tipoDato.STRING);
                break;
            case 117:
                this.$ = new Tipo.default(Tipo.tipoDato.BOOL);
                break;
            case 118:
                this.$ = new Tipo.default(Tipo.tipoDato.CHAR);
                break;
            case 119:
                this.$ = new Tipo.default(Tipo.tipoDato.NULL);
                break;
        }
    }
}
exports.ProyectoParser = ProyectoParser;
/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const lexer_1 = require("@ts-jison/lexer");
class ProyectoLexer extends lexer_1.JisonLexer {
    constructor(yy = {}) {
        super(yy);
        this.options = { "case-insensitive": true, "moduleName": "Proyecto" };
        this.rules = [
            /^(?:[/][/][^\n]*)/i,
            /^(?:[/][*](?:[^*]|\*[^/])*[*][/])/i,
            /^(?:int\b)/i,
            /^(?:double\b)/i,
            /^(?:string\b)/i,
            /^(?:char\b)/i,
            /^(?:echo\b)/i,
            /^(?:if\b)/i,
            /^(?:else\b)/i,
            /^(?:false\b)/i,
            /^(?:true\b)/i,
            /^(?:bool\b)/i,
            /^(?:while\b)/i,
            /^(?:for\b)/i,
            /^(?:ejecutar\b)/i,
            /^(?:void\b)/i,
            /^(?:let\b)/i,
            /^(?:const\b)/i,
            /^(?:cast\b)/i,
            /^(?:as\b)/i,
            /^(?:break\b)/i,
            /^(?:continue\b)/i,
            /^(?:switch\b)/i,
            /^(?:case\b)/i,
            /^(?:default\b)/i,
            /^(?:do\b)/i,
            /^(?:until\b)/i,
            /^(?:loop\b)/i,
            /^(?:new\b)/i,
            /^(?:vector\b)/i,
            /^(?:function\b)/i,
            /^(?:return\b)/i,
            /^(?:null\b)/i,
            /^(?:;)/i,
            /^(?::)/i,
            /^(?:\+)/i,
            /^(?:-)/i,
            /^(?:\*)/i,
            /^(?:\/)/i,
            /^(?:\^)/i,
            /^(?:\$)/i,
            /^(?:%)/i,
            /^(?:\()/i,
            /^(?:\))/i,
            /^(?:\[)/i,
            /^(?:\])/i,
            /^(?:=)/i,
            /^(?:\{)/i,
            /^(?:\})/i,
            /^(?:<)/i,
            /^(?:>)/i,
            /^(?:!)/i,
            /^(?:&&)/i,
            /^(?:\|\|)/i,
            /^(?:,)/i,
            /^(?:[0-9]+\.[0-9]+)/i,
            /^(?:[0-9]+)/i,
            /^(?:[\"][^\"]*[\"])/i,
            /^(?:[\'](?:[^\'\\]|\\[ntr]|[\\][\\]|[\\][\'])[\'])/i,
            /^(?:[a-z][a-z0-9_]*)/i,
            /^(?:[\ \r\t\f])/i,
            /^(?:[\ \n])/i,
            /^(?:$)/i,
            /^(?:)/i
        ];
        this.conditions = { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], "inclusive": true } };
    }
    performAction(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                return 95;
                break;
            case 3:
                return 96;
                break;
            case 4:
                return 97;
                break;
            case 5:
                return 99;
                break;
            case 6:
                return 27;
                break;
            case 7:
                return 60;
                break;
            case 8:
                return 61;
                break;
            case 9:
                return 85;
                break;
            case 10:
                return 84;
                break;
            case 11:
                return 98;
                break;
            case 12:
                return 62;
                break;
            case 13:
                return 55;
                break;
            case 14:
                return 72;
                break;
            case 15:
                return 69;
                break;
            case 16:
                return 93;
                break;
            case 17:
                return 94;
                break;
            case 18:
                return 37;
                break;
            case 19:
                return 39;
                break;
            case 20:
                return 65;
                break;
            case 21:
                return 66;
                break;
            case 22:
                return 50;
                break;
            case 23:
                return 59;
                break;
            case 24:
                return 54;
                break;
            case 25:
                return 63;
                break;
            case 26:
                return 64;
                break;
            case 27:
                return 57;
                break;
            case 28:
                return 43;
                break;
            case 29:
                return 44;
                break;
            case 30:
                return 68;
                break;
            case 31:
                return 67;
                break;
            case 32:
                return 87;
                break;
            case 33:
                return 8;
                break;
            case 34:
                return 34;
                break;
            case 35:
                return 30;
                break;
            case 36:
                return 31;
                break;
            case 37:
                return 75;
                break;
            case 38:
                return 76;
                break;
            case 39:
                return 77;
                break;
            case 40:
                return 78;
                break;
            case 41:
                return 79;
                break;
            case 42:
                return 38;
                break;
            case 43:
                return 40;
                break;
            case 44:
                return 41;
                break;
            case 45:
                return 42;
                break;
            case 46:
                return 36;
                break;
            case 47:
                return 51;
                break;
            case 48:
                return 53;
                break;
            case 49:
                return 88;
                break;
            case 50:
                return 90;
                break;
            case 51:
                return 89;
                break;
            case 52:
                return 91;
                break;
            case 53:
                return 92;
                break;
            case 54:
                return 48;
                break;
            case 55:
                return 82;
                break;
            case 56:
                return 81;
                break;
            case 57:
                yy_.yytext = yy_.yytext.substring(1, yy_.yyleng - 1);
                return "CADENA";
                break;
            case 58:
                yy_.yytext = yy_.yytext.substring(1, yy_.yyleng - 1);
                return "CHAR";
                break;
            case 59:
                return 29;
                break;
            case 60:
                break;
            case 61:
                break;
            case 62:
                return 5;
                break;
            case 63:
                break;
        }
    }
}
exports.ProyectoLexer = ProyectoLexer;
