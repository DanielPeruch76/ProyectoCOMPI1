"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProyectoLexer = exports.ProyectoParser = void 0;
const parser_1 = require("@ts-jison/parser");
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
const Tipo = require('./simbolo/Tipo');
const Nativo = require('./expresiones/Nativo');
const Aritmeticas = require('./expresiones/Aritmeticas');
const Relacionales = require('./expresiones/Relacionales');
const AccesoVar = require('./expresiones/AccesoVar');
const Decremento = require('./instrucciones/Decremento');
const Print = require('./instrucciones/Print');
const Declaracion = require('./instrucciones/Declaracion');
const DeclaracionDefecto = require('./instrucciones/DeclaracionDefecto');
const Incremento = require('./instrucciones/Incremento');
const Casteo = require('./instrucciones/Casteo');
const AsignacionVar = require('./instrucciones/AsignacionVar');
const CasteoAsignacion = require('./instrucciones/CasteoAsignacion');
const If = require('./instrucciones/If');
const IfElse = require('./instrucciones/IfElse');
const Elif = require('./instrucciones/Elif');
const While = require('./instrucciones/While');
const Break = require('./instrucciones/Break');
const Continue = require('./instrucciones/Continue');
const Metodo = require('./instrucciones/Metodo');
const Llamada = require('./instrucciones/Llamada');
const Run = require('./instrucciones/Run');
const ObjetoMatch = require('./instrucciones/ObjetoMatch');
const MatchDefault = require('./instrucciones/MatchDefault');
const Match = require('./instrucciones/Match');
const Default = require('./instrucciones/Default');
const For = require('./instrucciones/For');
const DoWhile = require('./instrucciones/DoWhile');
const Loop = require('./instrucciones/Loop');
const DeclaracionVector = require('./instrucciones/DeclaracionVector');
const Funcion = require('./instrucciones/Funcion');
const Return = require('./instrucciones/Return');
const DeclaracionMatriz = require('./instrucciones/DeclaracionMatriz');
const DeclaracionMatrizDefecto = require('./instrucciones/DeclaracionMatrizDefecto');
const DeclararArregloDefecto = require('./instrucciones/DeclararArregloDefecto');
const AsignacionVector = require('./instrucciones/AsignacionVector');
const AsignacionMatriz = require('./instrucciones/AsignacionMatriz');
const AccesoVector = require('./instrucciones/AccesoVector');
const AccesoMatriz = require('./instrucciones/AccesoMatriz');
const IfTernario = require('./instrucciones/IfTernario');
const ReturnDefault = require('./instrucciones/ReturnDefault');
const Lower = require('./instrucciones/Lower');
const Upper = require('./instrucciones/Upper');
const Round = require('./instrucciones/Round');
const Lenght = require('./instrucciones/Lenght');
const Truncate = require('./instrucciones/Truncate');
const ToString = require('./instrucciones/ToString');
const CharArray = require('./instrucciones/CharArray');
const Reverse = require('./instrucciones/Reverse');
class ProyectoParser extends parser_1.JisonParser {
    constructor(yy = {}, lexer = new ProyectoLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = { "error": 2, "INICIO": 3, "INSTRUCCIONES": 4, "EOF": 5, "INSTRUCCION": 6, "IMPRESION": 7, "PUNTOCOMA": 8, "DECLARACION": 9, "MULTIPLEDECLARACION": 10, "ASIGNACION": 11, "INCREMENTO": 12, "DECREMENTO": 13, "SIF": 14, "SBREAK": 15, "SCONTINUE": 16, "SRETURN": 17, "SRETURNSOLO": 18, "SDO": 19, "SWHILE": 20, "SLOOP": 21, "SFOR": 22, "SSWITCH": 23, "METODO": 24, "FUNCIONES": 25, "EJECUTAR": 26, "LLAMADA": 27, "FUNCIONREVERSE": 28, "TKPRINT": 29, "EXPRESION": 30, "ID": 31, "MAS": 32, "MENOS": 33, "MUTABILIDAD": 34, "LISTAID": 35, "DOSPUNTOS": 36, "TIPOS": 37, "IGUAL": 38, "CAST": 39, "PAR1": 40, "AS": 41, "PAR2": 42, "COR1": 43, "COR2": 44, "NEW": 45, "VECTOR": 46, "LISTAMATRIZ": 47, "LISTAVECTOR": 48, "SIFTERNARIO": 49, "REVERSE": 50, "COMA": 51, "VALORESMATRIZ": 52, "SWITCH": 53, "LLAVE1": 54, "INSTRUCCIONESMATCH": 55, "LLAVE2": 56, "DEFAULT": 57, "FOR": 58, "ACTUALIZARFOR": 59, "LOOP": 60, "SENTENCIAMATCH": 61, "CASE": 62, "IF": 63, "ELSE": 64, "WHILE": 65, "DO": 66, "UNTIL": 67, "BREAK": 68, "CONTINUE": 69, "RETURN": 70, "FUNCTION": 71, "VOID": 72, "PARAMS": 73, "PARAM": 74, "RUN": 75, "PARAMSCALL": 76, "PARAMCALL": 77, "MULTIPLICACION": 78, "DIVISION": 79, "POTENCIA": 80, "RAIZ": 81, "MODULO": 82, "RELACIONALES": 83, "ENTERO": 84, "DECIMAL": 85, "CADENA": 86, "TRUE": 87, "FALSE": 88, "CHAR": 89, "NULL": 90, "LOWER": 91, "UPPER": 92, "ROUND": 93, "LEN": 94, "TRUNCATE": 95, "TOSTRING": 96, "TOCHARARRAY": 97, "MENOR": 98, "NEGACION": 99, "MAYOR": 100, "AND": 101, "OR": 102, "LET": 103, "CONST": 104, "INT": 105, "DOUBLE": 106, "STRING": 107, "BOOL": 108, "CARACTER": 109, "$accept": 0, "$end": 1 };
        this.terminals_ = { 2: "error", 5: "EOF", 8: "PUNTOCOMA", 29: "TKPRINT", 31: "ID", 32: "MAS", 33: "MENOS", 36: "DOSPUNTOS", 38: "IGUAL", 39: "CAST", 40: "PAR1", 41: "AS", 42: "PAR2", 43: "COR1", 44: "COR2", 45: "NEW", 46: "VECTOR", 50: "REVERSE", 51: "COMA", 53: "SWITCH", 54: "LLAVE1", 56: "LLAVE2", 57: "DEFAULT", 58: "FOR", 60: "LOOP", 62: "CASE", 63: "IF", 64: "ELSE", 65: "WHILE", 66: "DO", 67: "UNTIL", 68: "BREAK", 69: "CONTINUE", 70: "RETURN", 71: "FUNCTION", 72: "VOID", 75: "RUN", 78: "MULTIPLICACION", 79: "DIVISION", 80: "POTENCIA", 81: "RAIZ", 82: "MODULO", 84: "ENTERO", 85: "DECIMAL", 86: "CADENA", 87: "TRUE", 88: "FALSE", 89: "CHAR", 90: "NULL", 91: "LOWER", 92: "UPPER", 93: "ROUND", 94: "LEN", 95: "TRUNCATE", 96: "TOSTRING", 97: "TOCHARARRAY", 98: "MENOR", 99: "NEGACION", 100: "MAYOR", 101: "AND", 102: "OR", 103: "LET", 104: "CONST", 105: "INT", 106: "DOUBLE", 107: "STRING", 108: "BOOL", 109: "CARACTER" };
        this.productions_ = [0, [3, 2], [4, 2], [4, 1], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [6, 1], [6, 2], [6, 2], [6, 2], [6, 2], [6, 2], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 2], [6, 2], [6, 2], [7, 2], [12, 3], [13, 3], [9, 6], [9, 11], [9, 13], [9, 18], [9, 12], [9, 8], [9, 6], [9, 8], [28, 4], [47, 3], [47, 1], [48, 3], [52, 3], [52, 1], [10, 4], [35, 3], [35, 1], [11, 3], [11, 8], [11, 6], [11, 9], [11, 3], [11, 0], [11, 6], [23, 7], [23, 10], [23, 9], [22, 11], [22, 11], [21, 4], [59, 3], [59, 3], [59, 3], [55, 2], [55, 1], [61, 4], [14, 7], [14, 11], [14, 9], [49, 7], [49, 7], [49, 7], [49, 7], [20, 7], [19, 8], [15, 1], [16, 1], [17, 2], [17, 2], [18, 1], [24, 9], [24, 8], [25, 9], [25, 8], [73, 3], [73, 1], [74, 5], [74, 3], [26, 5], [26, 4], [27, 4], [27, 3], [76, 3], [76, 1], [77, 3], [30, 2], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [30, 1], [30, 3], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 1], [30, 4], [30, 7], [30, 4], [30, 4], [30, 4], [30, 4], [30, 4], [30, 4], [30, 4], [30, 1], [83, 3], [83, 4], [83, 4], [83, 4], [83, 3], [83, 4], [83, 3], [83, 3], [83, 2], [34, 1], [34, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1]];
        this.defaultActions = { 29: [2, 73], 30: [2, 74], 40: [2, 131], 41: [2, 132], 42: [2, 1], 89: [2, 76], 134: [2, 49], 136: [2, 26], 137: [2, 27], 199: [2, 87], 234: [2, 86], 238: [2, 34], 242: [2, 51], 290: [2, 33], 294: [2, 46], 301: [2, 72], 325: [2, 59], 326: [2, 60], 344: [2, 29], 355: [2, 32], 357: [2, 30], 364: [2, 31] };
        // shorten static method to just `o` for terse STATE_TABLE
        const $V0 = [2, 50], $V1 = [1, 25], $V2 = [1, 27], $V3 = [1, 39], $V4 = [1, 36], $V5 = [1, 35], $V6 = [1, 34], $V7 = [1, 28], $V8 = [1, 33], $V9 = [1, 32], $Va = [1, 29], $Vb = [1, 30], $Vc = [1, 31], $Vd = [1, 37], $Ve = [1, 38], $Vf = [1, 40], $Vg = [1, 41], $Vh = [5, 8, 29, 31, 50, 53, 56, 57, 58, 60, 62, 63, 65, 66, 68, 69, 70, 71, 75, 103, 104], $Vi = [1, 62], $Vj = [1, 59], $Vk = [1, 61], $Vl = [1, 63], $Vm = [1, 64], $Vn = [1, 65], $Vo = [1, 66], $Vp = [1, 67], $Vq = [1, 68], $Vr = [1, 69], $Vs = [1, 71], $Vt = [1, 72], $Vu = [1, 73], $Vv = [1, 74], $Vw = [1, 75], $Vx = [1, 76], $Vy = [1, 77], $Vz = [1, 79], $VA = [1, 81], $VB = [1, 82], $VC = [1, 86], $VD = [1, 83], $VE = [1, 90], $VF = [1, 103], $VG = [1, 98], $VH = [1, 99], $VI = [1, 100], $VJ = [1, 101], $VK = [1, 102], $VL = [1, 106], $VM = [1, 107], $VN = [1, 114], $VO = [1, 108], $VP = [1, 109], $VQ = [1, 110], $VR = [1, 111], $VS = [1, 112], $VT = [1, 113], $VU = [1, 115], $VV = [1, 116], $VW = [1, 117], $VX = [1, 118], $VY = [8, 32, 33, 36, 38, 41, 42, 44, 51, 78, 79, 80, 81, 82, 98, 99, 100, 101, 102], $VZ = [1, 131], $V_ = [36, 51], $V$ = [1, 141], $V01 = [8, 31, 38, 42, 43, 51], $V11 = [8, 32, 33, 36, 38, 41, 42, 44, 51, 98, 99, 100, 101, 102], $V21 = [8, 36, 41, 42, 44, 51, 101, 102], $V31 = [1, 185], $V41 = [42, 51], $V51 = [8, 32, 33, 36, 38, 41, 42, 44, 51, 78, 79, 82, 98, 99, 100, 101, 102], $V61 = [8, 36, 38, 41, 42, 44, 51, 98, 99, 100, 101, 102], $V71 = [1, 213], $V81 = [1, 214], $V91 = [1, 231], $Va1 = [8, 36, 41, 42, 44, 51, 99, 101, 102], $Vb1 = [1, 255], $Vc1 = [1, 257], $Vd1 = [1, 274], $Ve1 = [56, 57, 62], $Vf1 = [1, 292], $Vg1 = [8, 36], $Vh1 = [44, 51];
        const o = parser_1.JisonParser.expandParseTable;
        this.table = [{ 3: 1, 4: 2, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 1: [3] }, { 5: [1, 42], 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($Vh, [2, 3]), { 8: [1, 44] }, { 8: [1, 45] }, { 8: [1, 46] }, { 8: [1, 47] }, { 8: [1, 48] }, { 8: [1, 49] }, o($Vh, [2, 10]), { 8: [1, 50] }, { 8: [1, 51] }, { 8: [1, 52] }, { 8: [1, 53] }, { 8: [1, 54] }, o($Vh, [2, 16]), o($Vh, [2, 17]), o($Vh, [2, 18]), o($Vh, [2, 19]), o($Vh, [2, 20]), o($Vh, [2, 21]), { 8: [1, 55] }, { 8: [1, 56] }, { 8: [1, 57] }, { 27: 70, 28: 78, 30: 58, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 31: $VA, 35: 80 }, { 32: [1, 84], 33: [1, 85], 38: $VB, 40: $VC, 43: $VD }, { 40: [1, 87] }, { 8: [2, 73] }, { 8: [2, 74] }, { 8: [2, 77], 27: 70, 28: 78, 30: 88, 31: $Vi, 33: $Vj, 40: $Vk, 49: 89, 50: $V3, 63: $VE, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 54: [1, 91] }, { 40: [1, 92] }, { 54: [1, 93] }, { 40: [1, 94] }, { 40: [1, 95] }, { 37: 97, 72: [1, 96], 90: $VF, 105: $VG, 106: $VH, 107: $VI, 108: $VJ, 109: $VK }, { 31: [1, 104] }, { 40: [1, 105] }, { 31: [2, 131] }, { 31: [2, 132] }, { 1: [2, 1] }, o($Vh, [2, 2]), o($Vh, [2, 4]), o($Vh, [2, 5]), o($Vh, [2, 6]), o($Vh, [2, 7]), o($Vh, [2, 8]), o($Vh, [2, 9]), o($Vh, [2, 11]), o($Vh, [2, 12]), o($Vh, [2, 13]), o($Vh, [2, 14]), o($Vh, [2, 15]), o($Vh, [2, 22]), o($Vh, [2, 23]), o($Vh, [2, 24]), { 8: [2, 25], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 27: 70, 28: 78, 30: 119, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($VY, [2, 101]), { 27: 70, 28: 78, 30: 120, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($VY, [2, 103], { 40: $VC, 43: [1, 121] }), o($VY, [2, 104]), o($VY, [2, 105]), o($VY, [2, 106]), o($VY, [2, 107]), o($VY, [2, 108]), o($VY, [2, 109]), o($VY, [2, 110]), o($VY, [2, 111]), { 40: [1, 122] }, { 40: [1, 123] }, { 40: [1, 124] }, { 40: [1, 125] }, { 40: [1, 126] }, { 40: [1, 127] }, { 40: [1, 128] }, o($VY, [2, 121]), { 27: 70, 28: 78, 30: 129, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 36: [1, 130], 51: $VZ }, o($V_, [2, 44]), { 27: 70, 28: 78, 30: 132, 31: $Vi, 33: $Vj, 39: [1, 133], 40: $Vk, 49: 134, 50: $V3, 63: $VE, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 135, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 32: [1, 136] }, { 33: [1, 137] }, { 31: $V$, 42: [1, 139], 76: 138, 77: 140 }, { 27: 70, 28: 78, 30: 142, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 8: [2, 75], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 8: [2, 76] }, { 40: [1, 143] }, { 4: 144, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 27: 70, 28: 78, 30: 145, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 4: 146, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 8: $V0, 9: 148, 11: 147, 31: [1, 149], 34: 150, 103: $Vf, 104: $Vg }, { 27: 70, 28: 78, 30: 151, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 31: [1, 152] }, { 31: [1, 153] }, o($V01, [2, 133]), o($V01, [2, 134]), o($V01, [2, 135]), o($V01, [2, 136]), o($V01, [2, 137]), o($V01, [2, 138]), { 40: [1, 154] }, { 31: [1, 155] }, { 27: 70, 28: 78, 30: 156, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 157, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 158, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 159, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 160, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 161, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 162, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 163, 31: $Vi, 33: $Vj, 38: [1, 164], 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 38: [1, 165] }, { 38: [1, 166] }, { 27: 70, 28: 78, 30: 167, 31: $Vi, 33: $Vj, 38: [1, 168], 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 169, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 170, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($V11, [2, 93], { 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS }), { 32: $VL, 33: $VM, 38: $VN, 42: [1, 171], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 27: 70, 28: 78, 30: 172, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 173, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 174, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 175, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 176, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 177, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 178, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 179, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($V21, [2, 130], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV }), { 37: 180, 90: $VF, 105: $VG, 106: $VH, 107: $VI, 108: $VJ, 109: $VK }, { 31: [1, 181] }, { 8: [2, 45], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 40: [1, 182] }, { 8: [2, 49] }, { 32: $VL, 33: $VM, 38: $VN, 44: [1, 183], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 8: [2, 26] }, { 8: [2, 27] }, { 42: [1, 184], 51: $V31 }, o($VY, [2, 89]), o($V41, [2, 91]), { 38: [1, 186] }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 187], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 27: 70, 28: 78, 30: 188, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 189], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 190], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 191], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 8: [1, 192] }, { 8: [1, 193] }, { 38: $VB, 43: $VD }, { 31: $VA, 35: 194 }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 195], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 40: [1, 196] }, { 40: [1, 197] }, { 31: $V$, 42: [1, 199], 76: 198, 77: 140 }, { 42: [1, 200] }, o($V11, [2, 94], { 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS }), o($V11, [2, 95], { 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS }), o($V51, [2, 96], { 80: $VQ, 81: $VR }), o($V51, [2, 97], { 80: $VQ, 81: $VR }), o($VY, [2, 98]), o($VY, [2, 99]), o($V51, [2, 100], { 80: $VQ, 81: $VR }), o($V61, [2, 122], { 32: $VL, 33: $VM, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS }), { 27: 70, 28: 78, 30: 201, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 202, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 203, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($V61, [2, 126], { 32: $VL, 33: $VM, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS }), { 27: 70, 28: 78, 30: 204, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($V21, [2, 128], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV }), o([8, 36, 41, 42, 44, 51, 102], [2, 129], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW }), o($VY, [2, 102]), { 32: $VL, 33: $VM, 38: $VN, 44: [1, 205], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 206], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 207], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 208], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 209], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 210], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 211], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 212], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 8: [2, 42], 38: $V71, 43: $V81 }, o($V_, [2, 43]), { 27: 70, 28: 78, 30: 215, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 38: [1, 216], 43: [1, 217] }, o($VY, [2, 88]), { 31: $V$, 77: 218 }, { 27: 70, 28: 78, 30: 219, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 54: [1, 220] }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 221], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 67: [1, 222] }, { 54: [1, 223] }, o($Vh, [2, 57]), { 27: 70, 28: 78, 30: 224, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 225, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 36: [1, 226], 51: $VZ }, { 54: [1, 227] }, { 31: $V91, 42: [1, 229], 73: 228, 74: 230 }, { 31: $V91, 42: [1, 233], 73: 232, 74: 230 }, { 42: [1, 234], 51: $V31 }, { 8: [2, 87] }, o($VY, [2, 36]), o($V61, [2, 125], { 32: $VL, 33: $VM, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS }), o($Va1, [2, 123], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 100: $VV }), o($Va1, [2, 124], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 100: $VV }), o($V61, [2, 127], { 32: $VL, 33: $VM, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS }), o($VY, [2, 112], { 43: [1, 235] }), o($VY, [2, 114]), o($VY, [2, 115]), o($VY, [2, 116]), o($VY, [2, 117]), o($VY, [2, 118]), o($VY, [2, 119]), o($VY, [2, 120]), { 27: 70, 28: 78, 30: 236, 31: $Vi, 33: $Vj, 39: [1, 237], 40: $Vk, 49: 238, 50: $V3, 63: $VE, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 44: [1, 239] }, { 32: $VL, 33: $VM, 38: $VN, 41: [1, 240], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 27: 70, 28: 78, 30: 241, 31: $Vi, 33: $Vj, 40: $Vk, 49: 242, 50: $V3, 63: $VE, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 243, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($V41, [2, 90]), o($V41, [2, 92], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }), { 4: 244, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 27: 70, 28: 78, 30: 245, 31: $Vi, 33: $Vj, 40: $Vk, 49: 246, 50: $V3, 63: $VE, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 40: [1, 247] }, { 4: 248, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 8: [1, 249], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 8: [1, 250], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 37: 251, 90: $VF, 105: $VG, 106: $VH, 107: $VI, 108: $VJ, 109: $VK }, { 55: 252, 57: [1, 253], 61: 254, 62: $Vb1 }, { 42: [1, 256], 51: $Vc1 }, { 54: [1, 258] }, o($V41, [2, 83]), { 36: [1, 259] }, { 42: [1, 260], 51: $Vc1 }, { 54: [1, 261] }, { 8: [2, 86] }, { 27: 70, 28: 78, 30: 262, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 8: [2, 28], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 40: [1, 263] }, { 8: [2, 34] }, { 38: [1, 264], 43: [1, 265] }, { 37: 266, 90: $VF, 105: $VG, 106: $VH, 107: $VI, 108: $VJ, 109: $VK }, { 8: [2, 47], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 8: [2, 51] }, { 32: $VL, 33: $VM, 38: $VN, 44: [1, 267], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 268], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 32: $VL, 33: $VM, 36: [1, 269], 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 36: [1, 270] }, { 27: 70, 28: 78, 30: 271, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 272], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 31: $Vd1, 59: 273 }, { 31: $Vd1, 59: 275 }, { 38: $V71, 43: $V81 }, { 56: [1, 276], 57: [1, 277], 61: 278, 62: $Vb1 }, { 36: [1, 279] }, o($Ve1, [2, 62]), { 27: 70, 28: 78, 30: 280, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 54: [1, 281] }, { 31: $V91, 74: 282 }, { 4: 283, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 37: 284, 90: $VF, 105: $VG, 106: $VH, 107: $VI, 108: $VJ, 109: $VK }, { 54: [1, 285] }, { 4: 286, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 32: $VL, 33: $VM, 38: $VN, 44: [1, 287], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 27: 70, 28: 78, 30: 288, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 291, 31: $Vi, 33: $Vj, 40: $Vk, 43: $Vf1, 45: [1, 289], 48: 290, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 44: [1, 293] }, { 42: [1, 294] }, { 38: [1, 295] }, o($Vh, [2, 64], { 64: [1, 296] }), { 27: 70, 28: 78, 30: 297, 31: $Vi, 33: $Vj, 40: $Vk, 49: 298, 50: $V3, 63: $VE, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 27: 70, 28: 78, 30: 300, 31: $Vi, 33: $Vj, 40: $Vk, 49: 299, 50: $V3, 63: $VE, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 32: $VL, 33: $VM, 38: $VN, 42: [1, 301], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, o($Vh, [2, 71]), { 42: [1, 302] }, { 32: [1, 304], 33: [1, 305], 38: [1, 303] }, { 42: [1, 306] }, o($Vh, [2, 52]), { 36: [1, 307] }, o($Ve1, [2, 61]), { 4: 308, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 32: $VL, 33: $VM, 36: [1, 309], 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 4: 310, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($V41, [2, 82]), { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 311], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($V41, [2, 85], { 38: [1, 312] }), { 4: 313, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 314], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($VY, [2, 113]), { 32: $VL, 33: $VM, 38: $VN, 41: [1, 315], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 46: [1, 316] }, { 8: [2, 33] }, { 8: [2, 35], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 27: 70, 28: 78, 30: 318, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 52: 317, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 38: [1, 319] }, { 8: [2, 46] }, { 27: 70, 28: 78, 30: 320, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 14: 322, 54: [1, 321], 63: $V7 }, o($Vg1, [2, 67], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }), o($Vg1, [2, 69]), o($Vg1, [2, 68]), o($Vg1, [2, 70], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }), { 8: [2, 72] }, { 54: [1, 323] }, { 27: 70, 28: 78, 30: 324, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 32: [1, 325] }, { 33: [1, 326] }, { 54: [1, 327] }, { 4: 328, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 329], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 4: 330, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 331], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($Vh, [2, 79]), { 27: 70, 28: 78, 30: 332, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 333], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($Vh, [2, 81]), { 37: 334, 90: $VF, 105: $VG, 106: $VH, 107: $VI, 108: $VJ, 109: $VK }, { 37: 335, 90: $VF, 105: $VG, 106: $VH, 107: $VI, 108: $VJ, 109: $VK }, { 44: [1, 336], 51: [1, 337] }, o($Vh1, [2, 41], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }), { 43: [1, 339], 45: [1, 338] }, { 8: [2, 48], 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 4: 340, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($Vh, [2, 66]), { 4: 341, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 32: $VL, 33: $VM, 38: $VN, 42: [2, 58], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 42: [2, 59] }, { 42: [2, 60] }, { 4: 342, 6: 3, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 343], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($Vh, [2, 54]), o($Ve1, [2, 63], { 7: 4, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 34: 26, 6: 43, 8: $V0, 29: $V1, 31: $V2, 50: $V3, 53: $V4, 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }), o($Vh, [2, 78]), o($V41, [2, 84], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }), o($Vh, [2, 80]), { 42: [1, 344] }, { 43: [1, 345] }, o([8, 44, 51], [2, 39]), { 27: 70, 28: 78, 30: 346, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 46: [1, 347] }, { 43: $Vf1, 47: 348, 48: 349 }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 350], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 351], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, { 6: 43, 7: 4, 8: $V0, 9: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 12, 17: 13, 18: 14, 19: 15, 20: 16, 21: 17, 22: 18, 23: 19, 24: 20, 25: 21, 26: 22, 27: 23, 28: 24, 29: $V1, 31: $V2, 34: 26, 50: $V3, 53: $V4, 56: [1, 352], 58: $V5, 60: $V6, 63: $V7, 65: $V8, 66: $V9, 68: $Va, 69: $Vb, 70: $Vc, 71: $Vd, 75: $Ve, 103: $Vf, 104: $Vg }, o($Vh, [2, 53]), { 8: [2, 29] }, { 27: 70, 28: 78, 30: 353, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($Vh1, [2, 40], { 32: $VL, 33: $VM, 38: $VN, 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }), { 37: 354, 90: $VF, 105: $VG, 106: $VH, 107: $VI, 108: $VJ, 109: $VK }, { 44: [1, 355], 51: [1, 356] }, o($Vh1, [2, 38]), o($Vh, [2, 65]), o($Vh, [2, 55]), o($Vh, [2, 56]), { 32: $VL, 33: $VM, 38: $VN, 44: [1, 357], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 43: [1, 358] }, { 8: [2, 32] }, { 43: $Vf1, 48: 359 }, { 8: [2, 30] }, { 27: 70, 28: 78, 30: 360, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, o($Vh1, [2, 37]), { 32: $VL, 33: $VM, 38: $VN, 44: [1, 361], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 43: [1, 362] }, { 27: 70, 28: 78, 30: 363, 31: $Vi, 33: $Vj, 40: $Vk, 50: $V3, 83: 60, 84: $Vl, 85: $Vm, 86: $Vn, 87: $Vo, 88: $Vp, 89: $Vq, 90: $Vr, 91: $Vs, 92: $Vt, 93: $Vu, 94: $Vv, 95: $Vw, 96: $Vx, 97: $Vy, 99: $Vz }, { 32: $VL, 33: $VM, 38: $VN, 44: [1, 364], 78: $VO, 79: $VP, 80: $VQ, 81: $VR, 82: $VS, 98: $VT, 99: $VU, 100: $VV, 101: $VW, 102: $VX }, { 8: [2, 31] }];
    }
    performAction(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
        /* this == yyval */
        var $0 = $$.length - 1;
        switch (yystate) {
            case 1:
                return $$[$0 - 1];
                break;
            case 2:
            case 61:
                $$[$0 - 1].push($$[$0]);
                this.$ = $$[$0 - 1];
                break;
            case 3:
            case 38:
            case 41:
            case 44:
            case 62:
            case 83:
            case 91:
                this.$ = [$$[$0]];
                break;
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 22:
            case 23:
            case 24:
            case 39:
            case 102:
                this.$ = $$[$0 - 1];
                break;
            case 10:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
                this.$ = $$[$0];
                break;
            case 25:
                this.$ = new Print.default($$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 26:
            case 59:
                this.$ = new Incremento.default($$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 27:
            case 60:
                this.$ = new Decremento.default($$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 28:
            case 34:
                this.$ = new Declaracion.default($$[$0 - 2], _$[$0 - 5].first_line, _$[$0 - 5].first_column, $$[$0 - 4][0], $$[$0], $$[$0 - 5]);
                break;
            case 29:
                this.$ = new Casteo.default($$[$0 - 7], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column, $$[$0 - 9][0], $$[$0 - 3], $$[$0 - 10]);
                break;
            case 30:
                this.$ = new DeclaracionVector.default($$[$0 - 9], _$[$0 - 12].first_line, _$[$0 - 12].first_column, $$[$0 - 12], $$[$0 - 11][0], $$[$0 - 3], $$[$0 - 1]);
                break;
            case 31:
                this.$ = new DeclaracionMatriz.default($$[$0 - 14], _$[$0 - 17].first_line, _$[$0 - 17].first_column, $$[$0 - 17], $$[$0 - 16][0], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1]);
                break;
            case 32:
                this.$ = new DeclaracionMatrizDefecto.default($$[$0 - 8], _$[$0 - 11].first_line, _$[$0 - 11].first_column, $$[$0 - 11], $$[$0 - 10][0], $$[$0 - 1]);
                break;
            case 33:
                this.$ = new DeclararArregloDefecto.default($$[$0 - 4], _$[$0 - 7].first_line, _$[$0 - 7].first_column, $$[$0 - 7], $$[$0 - 6][0], $$[$0]);
                break;
            case 35:
                this.$ = new Declaracion.default($$[$0 - 4], _$[$0 - 7].first_line, _$[$0 - 7].first_column, $$[$0 - 6][0], $$[$0], $$[$0 - 7]);
                break;
            case 36:
                this.$ = new Reverse.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 37:
            case 40:
            case 43:
            case 82:
            case 90:
                $$[$0 - 2].push($$[$0]);
                this.$ = $$[$0 - 2];
                break;
            case 42:
                this.$ = new DeclaracionDefecto.default($$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column, $$[$0 - 2], $$[$0 - 3]);
                break;
            case 45:
            case 49:
            case 58:
                this.$ = new AsignacionVar.default($$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 46:
                this.$ = new CasteoAsignacion.default($$[$0 - 7], $$[$0 - 1], $$[$0 - 3], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 47:
            case 51:
                this.$ = new AsignacionVector.default($$[$0 - 5], $$[$0 - 3], $$[$0], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                break;
            case 48:
                this.$ = new AsignacionMatriz.default($$[$0 - 8], $$[$0 - 6], $$[$0 - 3], $$[$0], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 52:
                this.$ = new Match.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 53:
                this.$ = new MatchDefault.default($$[$0 - 7], $$[$0 - 4], $$[$0 - 1], _$[$0 - 9].first_line, _$[$0 - 9].first_column);
                break;
            case 54:
                this.$ = new Default.default($$[$0 - 1], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 55:
            case 56:
                this.$ = new For.default($$[$0 - 8], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column);
                break;
            case 57:
                this.$ = new Loop.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 63:
                this.$ = new ObjetoMatch.default($$[$0 - 2], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 64:
                this.$ = new If.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 65:
                this.$ = new IfElse.default($$[$0 - 8], $$[$0 - 5], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column);
                break;
            case 66:
                this.$ = new Elif.default($$[$0 - 6], $$[$0 - 3], $$[$0], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 67:
            case 68:
            case 69:
            case 70:
                this.$ = new IfTernario.default($$[$0 - 4], $$[$0 - 2], $$[$0], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 71:
                this.$ = new While.default($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 72:
                this.$ = new DoWhile.default($$[$0 - 1], $$[$0 - 5], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 73:
                this.$ = new Break.default(_$[$0].first_line, _$[$0].first_column);
                break;
            case 74:
                this.$ = new Continue.default(_$[$0].first_line, _$[$0].first_column);
                break;
            case 75:
            case 76:
                this.$ = new Return.default($$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 77:
                this.$ = new ReturnDefault.default(_$[$0].first_line, _$[$0].first_column);
                break;
            case 78:
                this.$ = new Metodo.default(new Tipo.default(Tipo.tipoDato.VOID), $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 79:
                this.$ = new Metodo.default(new Tipo.default(Tipo.tipoDato.VOID), $$[$0 - 5], [], $$[$0 - 1], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 80:
                this.$ = new Funcion.default($$[$0 - 7], $$[$0 - 6], $$[$0 - 4], $$[$0 - 1], $$[$0 - 7], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                break;
            case 81:
                this.$ = new Funcion.default($$[$0 - 6], $$[$0 - 5], [], $$[$0 - 1], $$[$0 - 6], _$[$0 - 7].first_line, _$[$0 - 7].first_column);
                break;
            case 84:
                this.$ = { tipo: $$[$0 - 2], id: $$[$0 - 4], valor: $$[$0] };
                break;
            case 85:
                this.$ = { tipo: $$[$0], id: $$[$0 - 2], valor: null };
                break;
            case 86:
                this.$ = new Run.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                break;
            case 87:
                this.$ = new Run.default($$[$0 - 2], [], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 88:
                this.$ = new Llamada.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 89:
                this.$ = new Llamada.default($$[$0 - 2], [], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 92:
                this.$ = { id: $$[$0 - 2], valor: $$[$0] };
                break;
            case 93:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.UNARIA, _$[$0 - 1].first_line, _$[$0 - 1].first_column, $$[$0], $$[$0]);
                break;
            case 94:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 95:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 96:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 97:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 98:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 99:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RAIZ, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 100:
                this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO, _$[$0 - 2].first_line, _$[$0 - 2].first_column, $$[$0 - 2], $$[$0]);
                break;
            case 101:
            case 111:
            case 121:
                this.$ = $$[$0];
                break;
            case 103:
                this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 104:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 105:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 106:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 107:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true, _$[$0].first_line, _$[$0].first_column);
                break;
            case 108:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false, _$[$0].first_line, _$[$0].first_column);
                break;
            case 109:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CHAR), $$[$0], _$[$0].first_line, _$[$0].first_column);
                break;
            case 110:
                this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.NULL), null, _$[$0].first_line, _$[$0].first_column);
                break;
            case 112:
                this.$ = new AccesoVector.default($$[$0 - 3], $$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 113:
                this.$ = new AccesoMatriz.default($$[$0 - 6], $$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                break;
            case 114:
                this.$ = new Lower.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 115:
                this.$ = new Upper.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 116:
                this.$ = new Round.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 117:
                this.$ = new Lenght.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 118:
                this.$ = new Truncate.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 119:
                this.$ = new ToString.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 120:
                this.$ = new CharArray.default($$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 122:
                this.$ = new Relacionales.default(Relacionales.Relacional.MENOR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 123:
                this.$ = new Relacionales.default(Relacionales.Relacional.IGUALDAD, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 124:
                this.$ = new Relacionales.default(Relacionales.Relacional.DIFERENTE, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 125:
                this.$ = new Relacionales.default(Relacionales.Relacional.MENORIGUAL, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 126:
                this.$ = new Relacionales.default(Relacionales.Relacional.MAYOR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 127:
                this.$ = new Relacionales.default(Relacionales.Relacional.MAYORIGUAL, $$[$0 - 3], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                break;
            case 128:
                this.$ = new Relacionales.default(Relacionales.Relacional.AND, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 129:
                this.$ = new Relacionales.default(Relacionales.Relacional.OR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                break;
            case 130:
                this.$ = new Relacionales.default(Relacionales.Relacional.NOT, $$[$0], $$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                break;
            case 131:
                this.$ = "let";
                break;
            case 132:
                this.$ = "const";
                break;
            case 133:
                this.$ = new Tipo.default(Tipo.tipoDato.ENTERO);
                break;
            case 134:
                this.$ = new Tipo.default(Tipo.tipoDato.DECIMAL);
                break;
            case 135:
                this.$ = new Tipo.default(Tipo.tipoDato.STRING);
                break;
            case 136:
                this.$ = new Tipo.default(Tipo.tipoDato.BOOL);
                break;
            case 137:
                this.$ = new Tipo.default(Tipo.tipoDato.CHAR);
                break;
            case 138:
                this.$ = new Tipo.default(Tipo.tipoDato.NULL);
                break;
        }
    }
}
exports.ProyectoParser = ProyectoParser;
/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const lexer_1 = require("@ts-jison/lexer");
class ProyectoLexer extends lexer_1.JisonLexer {
    constructor(yy = {}) {
        super(yy);
        this.options = { "case-insensitive": true, "moduleName": "Proyecto" };
        this.rules = [
            /^(?:[/][/][^\n]*)/i,
            /^(?:[/][*](?:[^*]|\*[^/])*[*][/])/i,
            /^(?:int\b)/i,
            /^(?:double\b)/i,
            /^(?:string\b)/i,
            /^(?:char\b)/i,
            /^(?:echo\b)/i,
            /^(?:if\b)/i,
            /^(?:else\b)/i,
            /^(?:false\b)/i,
            /^(?:true\b)/i,
            /^(?:bool\b)/i,
            /^(?:while\b)/i,
            /^(?:for\b)/i,
            /^(?:ejecutar\b)/i,
            /^(?:void\b)/i,
            /^(?:let\b)/i,
            /^(?:const\b)/i,
            /^(?:cast\b)/i,
            /^(?:as\b)/i,
            /^(?:break\b)/i,
            /^(?:continue\b)/i,
            /^(?:switch\b)/i,
            /^(?:case\b)/i,
            /^(?:default\b)/i,
            /^(?:do\b)/i,
            /^(?:until\b)/i,
            /^(?:loop\b)/i,
            /^(?:new\b)/i,
            /^(?:vector\b)/i,
            /^(?:function\b)/i,
            /^(?:return\b)/i,
            /^(?:null\b)/i,
            /^(?:lower\b)/i,
            /^(?:upper\b)/i,
            /^(?:round\b)/i,
            /^(?:len\b)/i,
            /^(?:truncate\b)/i,
            /^(?:toString\b)/i,
            /^(?:toCharArray\b)/i,
            /^(?:reverse\b)/i,
            /^(?:;)/i,
            /^(?::)/i,
            /^(?:\+)/i,
            /^(?:-)/i,
            /^(?:\*)/i,
            /^(?:\/)/i,
            /^(?:\^)/i,
            /^(?:\$)/i,
            /^(?:%)/i,
            /^(?:\()/i,
            /^(?:\))/i,
            /^(?:\[)/i,
            /^(?:\])/i,
            /^(?:=)/i,
            /^(?:\{)/i,
            /^(?:\})/i,
            /^(?:<)/i,
            /^(?:>)/i,
            /^(?:!)/i,
            /^(?:&&)/i,
            /^(?:\|\|)/i,
            /^(?:,)/i,
            /^(?:[0-9]+\.[0-9]+)/i,
            /^(?:[0-9]+)/i,
            /^(?:[\"][^\"]*[\"])/i,
            /^(?:[\'](?:[^\'\\]|\\[ntr]|[\\][\\]|[\\][\'])[\'])/i,
            /^(?:[a-z][a-z0-9_]*)/i,
            /^(?:[\ \r\t\f])/i,
            /^(?:[\ \n])/i,
            /^(?:$)/i,
            /^(?:)/i
        ];
        this.conditions = { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71], "inclusive": true } };
    }
    performAction(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                return 105;
                break;
            case 3:
                return 106;
                break;
            case 4:
                return 107;
                break;
            case 5:
                return 109;
                break;
            case 6:
                return 29;
                break;
            case 7:
                return 63;
                break;
            case 8:
                return 64;
                break;
            case 9:
                return 88;
                break;
            case 10:
                return 87;
                break;
            case 11:
                return 108;
                break;
            case 12:
                return 65;
                break;
            case 13:
                return 58;
                break;
            case 14:
                return 75;
                break;
            case 15:
                return 72;
                break;
            case 16:
                return 103;
                break;
            case 17:
                return 104;
                break;
            case 18:
                return 39;
                break;
            case 19:
                return 41;
                break;
            case 20:
                return 68;
                break;
            case 21:
                return 69;
                break;
            case 22:
                return 53;
                break;
            case 23:
                return 62;
                break;
            case 24:
                return 57;
                break;
            case 25:
                return 66;
                break;
            case 26:
                return 67;
                break;
            case 27:
                return 60;
                break;
            case 28:
                return 45;
                break;
            case 29:
                return 46;
                break;
            case 30:
                return 71;
                break;
            case 31:
                return 70;
                break;
            case 32:
                return 90;
                break;
            case 33:
                return 91;
                break;
            case 34:
                return 92;
                break;
            case 35:
                return 93;
                break;
            case 36:
                return 94;
                break;
            case 37:
                return 95;
                break;
            case 38:
                return 96;
                break;
            case 39:
                return 97;
                break;
            case 40:
                return 50;
                break;
            case 41:
                return 8;
                break;
            case 42:
                return 36;
                break;
            case 43:
                return 32;
                break;
            case 44:
                return 33;
                break;
            case 45:
                return 78;
                break;
            case 46:
                return 79;
                break;
            case 47:
                return 80;
                break;
            case 48:
                return 81;
                break;
            case 49:
                return 82;
                break;
            case 50:
                return 40;
                break;
            case 51:
                return 42;
                break;
            case 52:
                return 43;
                break;
            case 53:
                return 44;
                break;
            case 54:
                return 38;
                break;
            case 55:
                return 54;
                break;
            case 56:
                return 56;
                break;
            case 57:
                return 98;
                break;
            case 58:
                return 100;
                break;
            case 59:
                return 99;
                break;
            case 60:
                return 101;
                break;
            case 61:
                return 102;
                break;
            case 62:
                return 51;
                break;
            case 63:
                return 85;
                break;
            case 64:
                return 84;
                break;
            case 65:
                yy_.yytext = yy_.yytext.substring(1, yy_.yyleng - 1);
                return "CADENA";
                break;
            case 66:
                yy_.yytext = yy_.yytext.substring(1, yy_.yyleng - 1);
                return "CHAR";
                break;
            case 67:
                return 31;
                break;
            case 68:
                break;
            case 69:
                break;
            case 70:
                return 5;
                break;
            case 71:
                break;
        }
    }
}
exports.ProyectoLexer = ProyectoLexer;
