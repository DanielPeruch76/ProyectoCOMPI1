import { JisonParser, JisonParserApi, StateType, SymbolsType, TerminalsType, ProductionsType } from '@ts-jison/parser';
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  const Tipo = require('./simbolo/Tipo')
  const Nativo = require('./expresiones/Nativo')
  const Aritmeticas = require('./expresiones/Aritmeticas')
  const Relacionales = require('./expresiones/Relacionales')
  const AccesoVar = require('./expresiones/AccesoVar') 
  const Decremento = require('./instrucciones/Decremento') 
  const Print = require('./instrucciones/Print')
  const Declaracion = require('./instrucciones/Declaracion')
  const DeclaracionDefecto = require('./instrucciones/DeclaracionDefecto')
  const Incremento = require('./instrucciones/Incremento')
  const Casteo = require('./instrucciones/Casteo')
  const AsignacionVar = require('./instrucciones/AsignacionVar')
  const CasteoAsignacion = require('./instrucciones/CasteoAsignacion')
  const If = require('./instrucciones/If')
  const IfElse = require('./instrucciones/IfElse')
  const Elif = require('./instrucciones/Elif')
  const While = require('./instrucciones/While')
  const Break = require('./instrucciones/Break')
  const Continue = require('./instrucciones/Continue')
  const Metodo = require('./instrucciones/Metodo')
  const Llamada = require('./instrucciones/Llamada')
  const Run = require('./instrucciones/Run')
  const ObjetoMatch = require('./instrucciones/ObjetoMatch')
  const MatchDefault= require('./instrucciones/MatchDefault')
  const Match = require('./instrucciones/Match')
  const Default = require('./instrucciones/Default')
  const For = require('./instrucciones/For')
  const DoWhile = require('./instrucciones/DoWhile')
  const Loop = require('./instrucciones/Loop')
  const DeclaracionVector = require('./instrucciones/DeclaracionVector')
  const Funcion = require('./instrucciones/Funcion')
  const Return = require('./instrucciones/Return')

export class ProyectoParser extends JisonParser implements JisonParserApi {
    $?: any;
    symbols_: SymbolsType = {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRESION":7,"PUNTOCOMA":8,"DECLARACION":9,"MULTIPLEDECLARACION":10,"ASIGNACION":11,"INCREMENTO":12,"DECREMENTO":13,"SIF":14,"SBREAK":15,"SCONTINUE":16,"SRETURN":17,"SDO":18,"SWHILE":19,"SLOOP":20,"SFOR":21,"SSWITCH":22,"METODO":23,"FUNCIONES":24,"EJECUTAR":25,"LLAMADA":26,"TKPRINT":27,"EXPRESION":28,"ID":29,"MAS":30,"MENOS":31,"MUTABILIDAD":32,"LISTAID":33,"DOSPUNTOS":34,"TIPOS":35,"IGUAL":36,"CAST":37,"PAR1":38,"AS":39,"PAR2":40,"COR1":41,"COR2":42,"NEW":43,"VECTOR":44,"COMA":45,"SWITCH":46,"LLAVE1":47,"INSTRUCCIONESMATCH":48,"LLAVE2":49,"DEFAULT":50,"FOR":51,"ACTUALIZARFOR":52,"LOOP":53,"SENTENCIAMATCH":54,"CASE":55,"IF":56,"ELSE":57,"WHILE":58,"DO":59,"UNTIL":60,"BREAK":61,"CONTINUE":62,"RETURN":63,"FUNCTION":64,"VOID":65,"PARAMS":66,"PARAM":67,"RUN":68,"PARAMSCALL":69,"PARAMCALL":70,"MULTIPLICACION":71,"DIVISION":72,"POTENCIA":73,"RAIZ":74,"MODULO":75,"RELACIONALES":76,"ENTERO":77,"DECIMAL":78,"CADENA":79,"TRUE":80,"FALSE":81,"CHAR":82,"MENOR":83,"NEGACION":84,"MAYOR":85,"AND":86,"OR":87,"LET":88,"CONST":89,"INT":90,"DOUBLE":91,"STRING":92,"BOOL":93,"CARACTER":94,"$accept":0,"$end":1};
    terminals_: TerminalsType = {2:"error",5:"EOF",8:"PUNTOCOMA",27:"TKPRINT",29:"ID",30:"MAS",31:"MENOS",34:"DOSPUNTOS",36:"IGUAL",37:"CAST",38:"PAR1",39:"AS",40:"PAR2",41:"COR1",42:"COR2",43:"NEW",44:"VECTOR",45:"COMA",46:"SWITCH",47:"LLAVE1",49:"LLAVE2",50:"DEFAULT",51:"FOR",53:"LOOP",55:"CASE",56:"IF",57:"ELSE",58:"WHILE",59:"DO",60:"UNTIL",61:"BREAK",62:"CONTINUE",63:"RETURN",64:"FUNCTION",65:"VOID",68:"RUN",71:"MULTIPLICACION",72:"DIVISION",73:"POTENCIA",74:"RAIZ",75:"MODULO",77:"ENTERO",78:"DECIMAL",79:"CADENA",80:"TRUE",81:"FALSE",82:"CHAR",83:"MENOR",84:"NEGACION",85:"MAYOR",86:"AND",87:"OR",88:"LET",89:"CONST",90:"INT",91:"DOUBLE",92:"STRING",93:"BOOL",94:"CARACTER"};
    productions_: ProductionsType = [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[7,2],[12,3],[13,3],[9,6],[9,11],[9,13],[10,4],[33,3],[33,1],[11,3],[11,8],[22,7],[22,10],[22,9],[21,11],[21,11],[20,4],[52,3],[52,3],[52,3],[48,2],[48,1],[54,4],[14,7],[14,11],[14,9],[19,7],[18,8],[15,1],[16,1],[17,2],[23,9],[23,8],[24,9],[24,8],[66,3],[66,1],[67,4],[67,2],[25,5],[25,4],[26,4],[26,3],[69,3],[69,1],[70,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1],[28,3],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[76,3],[76,4],[76,4],[76,4],[76,3],[76,4],[76,3],[76,3],[76,2],[32,1],[32,1],[35,1],[35,1],[35,1],[35,1],[35,1]];
    table: Array<StateType>;
    defaultActions: {[key:number]: any} = {27:[2,51],28:[2,52],37:[2,96],38:[2,97],39:[2,1],107:[2,24],108:[2,25],158:[2,63],181:[2,62],224:[2,33],226:[2,50],246:[2,41],247:[2,42],260:[2,27],266:[2,28]};

    constructor (yy = {}, lexer = new ProyectoLexer(yy)) {
      super(yy, lexer);

      // shorten static method to just `o` for terse STATE_TABLE
      const $V0=[1,23],$V1=[1,25],$V2=[1,34],$V3=[1,33],$V4=[1,32],$V5=[1,26],$V6=[1,31],$V7=[1,30],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[5,27,29,46,49,50,51,53,55,56,58,59,61,62,63,64,68,88,89],$Vg=[1,57],$Vh=[1,54],$Vi=[1,56],$Vj=[1,58],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,65],$Vq=[1,67],$Vr=[1,68],$Vs=[1,71],$Vt=[1,81],$Vu=[1,82],$Vv=[1,83],$Vw=[1,84],$Vx=[1,85],$Vy=[1,87],$Vz=[1,88],$VA=[1,95],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[1,96],$VI=[1,97],$VJ=[1,98],$VK=[1,99],$VL=[8,30,31,34,36,39,40,42,45,71,72,73,74,75,83,84,85,86,87],$VM=[1,104],$VN=[34,45],$VO=[1,112],$VP=[8,29,36,40,41],$VQ=[8,30,31,34,36,39,40,42,45,83,84,85,86,87],$VR=[8,34,39,40,42,45,86,87],$VS=[1,145],$VT=[40,45],$VU=[8,30,31,34,36,39,40,42,45,71,72,75,83,84,85,86,87],$VV=[8,34,36,39,40,42,45,83,84,85,86,87],$VW=[1,163],$VX=[1,164],$VY=[8,34,39,40,42,45,84,86,87],$VZ=[1,195],$V_=[1,197],$V$=[1,209],$V01=[49,50,55];
      const o = JisonParser.expandParseTable;
      this.table = [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{1:[3]},{5:[1,39],6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},o($Vf,[2,3]),{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},o($Vf,[2,10]),{8:[1,47]},{8:[1,48]},{8:[1,49]},{8:[1,50]},o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),{8:[1,51]},{8:[1,52]},{26:64,28:53,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{29:$Vq,33:66},{30:[1,69],31:[1,70],36:$Vr,38:$Vs},{38:[1,72]},{8:[2,51]},{8:[2,52]},{26:64,28:73,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{47:[1,74]},{38:[1,75]},{47:[1,76]},{38:[1,77]},{38:[1,78]},{35:80,65:[1,79],90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{29:[1,86]},{29:[2,96]},{29:[2,97]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,21]),o($Vf,[2,22]),{8:[2,23],30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{26:64,28:100,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},o($VL,[2,77]),{26:64,28:101,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},o($VL,[2,79],{38:$Vs}),o($VL,[2,80]),o($VL,[2,81]),o($VL,[2,82]),o($VL,[2,83]),o($VL,[2,84]),o($VL,[2,85]),o($VL,[2,86]),{26:64,28:102,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{34:[1,103],45:$VM},o($VN,[2,31]),{26:64,28:105,29:$Vg,31:$Vh,37:[1,106],38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{30:[1,107]},{31:[1,108]},{29:$VO,40:[1,110],69:109,70:111},{26:64,28:113,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{8:[2,53],30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{4:114,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{26:64,28:115,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{4:116,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{9:118,11:117,29:[1,119],32:120,88:$Vd,89:$Ve},{26:64,28:121,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{29:[1,122]},{29:[1,123]},o($VP,[2,98]),o($VP,[2,99]),o($VP,[2,100]),o($VP,[2,101]),o($VP,[2,102]),{38:[1,124]},{26:64,28:125,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:126,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:127,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:128,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:129,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:130,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:131,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:132,29:$Vg,31:$Vh,36:[1,133],38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{36:[1,134]},{36:[1,135]},{26:64,28:136,29:$Vg,31:$Vh,36:[1,137],38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:138,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:139,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},o($VQ,[2,69],{71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),{30:$Vy,31:$Vz,36:$VA,40:[1,140],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},o($VR,[2,95],{30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI}),{35:141,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{29:[1,142]},{8:[2,32],30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{38:[1,143]},{8:[2,24]},{8:[2,25]},{40:[1,144],45:$VS},o($VL,[2,65]),o($VT,[2,67]),{36:[1,146]},{30:$Vy,31:$Vz,36:$VA,40:[1,147],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,148],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{30:$Vy,31:$Vz,36:$VA,40:[1,149],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,150],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{8:[1,151]},{8:[1,152]},{36:$Vr},{29:$Vq,33:153},{30:$Vy,31:$Vz,36:$VA,40:[1,154],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{38:[1,155]},{38:[1,156]},{29:$VO,40:[1,158],69:157,70:111},o($VQ,[2,70],{71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),o($VQ,[2,71],{71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),o($VU,[2,72],{73:$VD,74:$VE}),o($VU,[2,73],{73:$VD,74:$VE}),o($VL,[2,74]),o($VL,[2,75]),o($VU,[2,76],{73:$VD,74:$VE}),o($VV,[2,87],{30:$Vy,31:$Vz,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),{26:64,28:159,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:160,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:161,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},o($VV,[2,91],{30:$Vy,31:$Vz,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),{26:64,28:162,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},o($VR,[2,93],{30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI}),o([8,34,39,40,42,45,87],[2,94],{30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ}),o($VL,[2,78]),{8:[2,29],36:$VW,41:$VX},o($VN,[2,30]),{26:64,28:165,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},o($VL,[2,64]),{29:$VO,70:166},{26:64,28:167,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{47:[1,168]},{60:[1,169]},{47:[1,170]},o($Vf,[2,39]),{26:64,28:171,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{26:64,28:172,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{34:[1,173],45:$VM},{47:[1,174]},{35:178,40:[1,176],66:175,67:177,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{35:178,40:[1,180],66:179,67:177,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{40:[1,181],45:$VS},{8:[2,63]},o($VV,[2,90],{30:$Vy,31:$Vz,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),o($VY,[2,88],{30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,85:$VI}),o($VY,[2,89],{30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,85:$VI}),o($VV,[2,92],{30:$Vy,31:$Vz,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF}),{26:64,28:182,29:$Vg,31:$Vh,37:[1,183],38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{42:[1,184]},{30:$Vy,31:$Vz,36:$VA,39:[1,185],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},o($VT,[2,66]),o($VT,[2,68],{30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK}),{4:186,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{38:[1,187]},{4:188,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{8:[1,189],30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{8:[1,190],30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{35:191,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{48:192,50:[1,193],54:194,55:$VZ},{40:[1,196],45:$V_},{47:[1,198]},o($VT,[2,59]),{29:[1,199]},{40:[1,200],45:$V_},{47:[1,201]},{8:[2,62]},{8:[2,26],30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{38:[1,202]},{36:[1,203]},{35:204,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,205],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{26:64,28:206,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,207],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{29:$V$,52:208},{29:$V$,52:210},{36:$VW,41:$VX},{49:[1,211],50:[1,212],54:213,55:$VZ},{34:[1,214]},o($V01,[2,44]),{26:64,28:215,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{47:[1,216]},{35:178,67:217,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{4:218,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},o($VT,[2,61],{36:[1,219]}),{47:[1,220]},{4:221,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{26:64,28:222,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{43:[1,223]},{40:[1,224]},o($Vf,[2,46],{57:[1,225]}),{30:$Vy,31:$Vz,36:$VA,40:[1,226],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},o($Vf,[2,49]),{40:[1,227]},{30:[1,229],31:[1,230],36:[1,228]},{40:[1,231]},o($Vf,[2,34]),{34:[1,232]},o($V01,[2,43]),{4:233,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{30:$Vy,31:$Vz,34:[1,234],36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{4:235,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},o($VT,[2,58]),{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,236],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{26:64,28:237,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{4:238,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,239],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{30:$Vy,31:$Vz,36:$VA,39:[1,240],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{44:[1,241]},{8:[2,33]},{14:243,47:[1,242],56:$V5},{8:[2,50]},{47:[1,244]},{26:64,28:245,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},{30:[1,246]},{31:[1,247]},{47:[1,248]},{4:249,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,250],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{4:251,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,252],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},o($Vf,[2,55]),o($VT,[2,60],{30:$Vy,31:$Vz,36:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK}),{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,253],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},o($Vf,[2,57]),{35:254,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{35:255,90:$Vt,91:$Vu,92:$Vv,93:$Vw,94:$Vx},{4:256,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},o($Vf,[2,48]),{4:257,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{30:$Vy,31:$Vz,36:$VA,40:[2,40],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{40:[2,41]},{40:[2,42]},{4:258,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,259],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},o($Vf,[2,36]),o($V01,[2,45],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,32:24,6:40,27:$V0,29:$V1,46:$V2,51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve}),o($Vf,[2,54]),o($Vf,[2,56]),{40:[1,260]},{41:[1,261]},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,262],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,263],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},{6:40,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:$V0,29:$V1,32:24,46:$V2,49:[1,264],51:$V3,53:$V4,56:$V5,58:$V6,59:$V7,61:$V8,62:$V9,63:$Va,64:$Vb,68:$Vc,88:$Vd,89:$Ve},o($Vf,[2,35]),{8:[2,27]},{26:64,28:265,29:$Vg,31:$Vh,38:$Vi,76:55,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,84:$Vp},o($Vf,[2,47]),o($Vf,[2,37]),o($Vf,[2,38]),{30:$Vy,31:$Vz,36:$VA,42:[1,266],71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK},{8:[2,28]}];
    }

    performAction (yytext:string, yyleng:number, yylineno:number, yy:any, yystate:number /* action[1] */, $$:any /* vstack */, _$:any /* lstack */): any {
/* this == yyval */
          var $0 = $$.length - 1;
        switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 43:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 31: case 44: case 59: case 67:
this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 11: case 12: case 13: case 14: case 21: case 22: case 78:
this.$ = $$[$0-1];
break;
case 10: case 15: case 16: case 17: case 18: case 19: case 20:
this.$ = $$[$0];
break;
case 23:
this.$ = new Print.default($$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 24: case 41:
this.$ = new Incremento.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 25: case 42:
this.$ = new Decremento.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 26:
this.$ = new Declaracion.default($$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4][0], $$[$0],$$[$0-5]);
break;
case 27:
this.$ = new Casteo.default($$[$0-7], $$[$0-1],_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-9][0], $$[$0-3],$$[$0-10]);
break;
case 28:
this.$ = new DeclaracionVector.default($$[$0-9],_$[$0-12].first_line, _$[$0-12].first_column,$$[$0-12],$$[$0-11][0], $$[$0-3],$$[$0-1]);
break;
case 29:
this.$ = new DeclaracionDefecto.default($$[$0], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2],$$[$0-3]);
break;
case 30: case 58: case 66:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 32: case 40:
this.$ = new AsignacionVar.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 33:
this.$ = new CasteoAsignacion.default($$[$0-7], $$[$0-1],$$[$0-3], _$[$0-7].first_line, _$[$0-7].first_column );
break;
case 34:
this.$ = new Match.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column );
break;
case 35:
this.$ = new MatchDefault.default($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column );
break;
case 36:
this.$ = new Default.default($$[$0-1],_$[$0-8].first_line, _$[$0-8].first_column );
break;
case 37: case 38:
this.$ = new For.default($$[$0-8], $$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].first_column );
break;
case 39:
this.$ = new Loop.default($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column );
break;
case 45:
this.$ = new ObjetoMatch.default($$[$0-2], $$[$0],_$[$0-3].first_line, _$[$0-3].first_column );
break;
case 46:
this.$ = new If.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 47:
this.$ = new IfElse.default($$[$0-8], $$[$0-5],$$[$0-1],_$[$0-10].first_line, _$[$0-10].first_column);
break;
case 48:
this.$ = new Elif.default($$[$0-6], $$[$0-3],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 49:
this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column );
break;
case 50:
this.$ = new DoWhile.default($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column );
break;
case 51:
this.$ = new Break.default(_$[$0].first_line, _$[$0].first_column );
break;
case 52:
this.$ = new Continue.default(_$[$0].first_line, _$[$0].first_column );
break;
case 53:
this.$ = new Return.default($$[$0], _$[$0-1].first_line, _$[$0-1].first_column );
break;
case 54:
this.$ = new Metodo.default(new Tipo.default(Tipo.tipoDato.VOID), $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 55:
this.$ = new Metodo.default(new Tipo.default(Tipo.tipoDato.VOID), $$[$0-5], [], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 56:
this.$ = new Funcion.default($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], $$[$0-7], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 57:
this.$ = new Funcion.default($$[$0-6], $$[$0-5], [], $$[$0-1], $$[$0-6], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 60:
this.$ = {tipo:$$[$0-3], id:$$[$0-2], valor:$$[$0]};
break;
case 61:
this.$ = {tipo:$$[$0-1], id:$$[$0], valor:null};
break;
case 62:
this.$ = new Run.default($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 63:
this.$ = new Run.default($$[$0-2], [], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 64:
this.$ = new Llamada.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 65:
this.$ = new Llamada.default($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68:
this.$ = {id:$$[$0-2], valor:$$[$0]};
break;
case 69:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.UNARIA,_$[$0-1].first_line, _$[$0-1].first_column,$$[$0],$$[$0]);
break;
case 70:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.SUMA,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 71:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RESTA,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 72:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 73:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 74:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.POTENCIA,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 75:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.RAIZ,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 76:
this.$ = new Aritmeticas.default(Aritmeticas.Operadores.MODULO,_$[$0-2].first_line, _$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 77: case 86:
this.$=$$[$0]
break;
case 79:
this.$ = new AccesoVar.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 80:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO), $$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 81:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL), $$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 82:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.STRING), $$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 83:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), true,_$[$0].first_line, _$[$0].first_column);
break;
case 84:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL), false,_$[$0].first_line, _$[$0].first_column);
break;
case 85:
this.$ = new Nativo.default(new Tipo.default(Tipo.tipoDato.CHAR), $$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 87:
this.$ = new Relacionales.default(Relacionales.Relacional.MENOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 88:
this.$ = new Relacionales.default(Relacionales.Relacional.IGUALDAD, $$[$0-3], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column );
break;
case 89:
this.$ = new Relacionales.default(Relacionales.Relacional.DIFERENTE, $$[$0-3], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column );
break;
case 90:
this.$ = new Relacionales.default(Relacionales.Relacional.MENORIGUAL, $$[$0-3], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column );
break;
case 91:
this.$ = new Relacionales.default(Relacionales.Relacional.MAYOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 92:
this.$ = new Relacionales.default(Relacionales.Relacional.MAYORIGUAL, $$[$0-3], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column );
break;
case 93:
this.$ = new Relacionales.default(Relacionales.Relacional.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 94:
this.$ = new Relacionales.default(Relacionales.Relacional.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 95:
this.$ = new Relacionales.default(Relacionales.Relacional.NOT, $$[$0], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column );
break;
case 96:
this.$="let"
break;
case 97:
this.$="const"
break;
case 98:
this.$=new Tipo.default(Tipo.tipoDato.ENTERO);
break;
case 99:
this.$=new Tipo.default(Tipo.tipoDato.DECIMAL);
break;
case 100:
this.$=new Tipo.default(Tipo.tipoDato.STRING);
break;
case 101:
this.$=new Tipo.default(Tipo.tipoDato.BOOL);
break;
case 102:
this.$=new Tipo.default(Tipo.tipoDato.CHAR);
break;
        }
    }
}


/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
import { JisonLexer, JisonLexerApi } from '@ts-jison/lexer';

export class ProyectoLexer extends JisonLexer implements JisonLexerApi {
    options: any = {"case-insensitive":true,"moduleName":"Proyecto"};
    constructor (yy = {}) {
        super(yy);
    }

    rules: RegExp[] = [
        /^(?:int\b)/i,
        /^(?:double\b)/i,
        /^(?:string\b)/i,
        /^(?:char\b)/i,
        /^(?:echo\b)/i,
        /^(?:if\b)/i,
        /^(?:else\b)/i,
        /^(?:false\b)/i,
        /^(?:true\b)/i,
        /^(?:bool\b)/i,
        /^(?:while\b)/i,
        /^(?:for\b)/i,
        /^(?:ejecutar\b)/i,
        /^(?:void\b)/i,
        /^(?:let\b)/i,
        /^(?:const\b)/i,
        /^(?:cast\b)/i,
        /^(?:as\b)/i,
        /^(?:break\b)/i,
        /^(?:continue\b)/i,
        /^(?:switch\b)/i,
        /^(?:case\b)/i,
        /^(?:default\b)/i,
        /^(?:do\b)/i,
        /^(?:until\b)/i,
        /^(?:loop\b)/i,
        /^(?:new\b)/i,
        /^(?:vector\b)/i,
        /^(?:function\b)/i,
        /^(?:return\b)/i,
        /^(?:;)/i,
        /^(?::)/i,
        /^(?:\+)/i,
        /^(?:-)/i,
        /^(?:\*)/i,
        /^(?:\/)/i,
        /^(?:\^)/i,
        /^(?:\$)/i,
        /^(?:%)/i,
        /^(?:\()/i,
        /^(?:\))/i,
        /^(?:\[)/i,
        /^(?:\])/i,
        /^(?:=)/i,
        /^(?:\{)/i,
        /^(?:\})/i,
        /^(?:<)/i,
        /^(?:>)/i,
        /^(?:!)/i,
        /^(?:&&)/i,
        /^(?:\|\|)/i,
        /^(?:,)/i,
        /^(?:[0-9]+\.[0-9]+)/i,
        /^(?:[0-9]+)/i,
        /^(?:[\"][^\"]*[\"])/i,
        /^(?:[\'](?:[^\'\\]|\\[ntr]|[\\][\\]|[\\][\'])[\'])/i,
        /^(?:[a-z][a-z0-9_]*)/i,
        /^(?:[\ \r\t\f])/i,
        /^(?:[\ \n])/i,
        /^(?:[/][/][^\n]*)/i,
        /^(?:[/][*](?:[^*]|\*[^/])*[*][/])/i,
        /^(?:$)/i,
        /^(?:)/i
    ];
    conditions: any = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
    performAction (yy:any,yy_:any,$avoiding_name_collisions:any,YY_START:any): any {
          var YYSTATE=YY_START;
        switch($avoiding_name_collisions) {
    case 0:return 90
      break;
    case 1:return 91
      break;
    case 2:return 92
      break;
    case 3:return 94
      break;
    case 4:return 27
      break;
    case 5:return 56
      break;
    case 6:return 57
      break;
    case 7:return 81
      break;
    case 8:return 80
      break;
    case 9:return 93
      break;
    case 10:return 58
      break;
    case 11:return 51
      break;
    case 12:return 68
      break;
    case 13:return 65
      break;
    case 14:return 88
      break;
    case 15:return 89
      break;
    case 16:return 37
      break;
    case 17:return 39
      break;
    case 18:return 61
      break;
    case 19:return 62
      break;
    case 20:return 46
      break;
    case 21:return 55
      break;
    case 22:return 50
      break;
    case 23:return 59
      break;
    case 24:return 60
      break;
    case 25:return 53
      break;
    case 26:return 43
      break;
    case 27:return 44
      break;
    case 28:return 64
      break;
    case 29:return 63
      break;
    case 30:return 8
      break;
    case 31:return 34
      break;
    case 32:return 30
      break;
    case 33:return 31
      break;
    case 34:return 71
      break;
    case 35:return 72
      break;
    case 36:return 73
      break;
    case 37:return 74
      break;
    case 38:return 75
      break;
    case 39:return 38
      break;
    case 40:return 40
      break;
    case 41:return 41
      break;
    case 42:return 42
      break;
    case 43:return 36
      break;
    case 44:return 47
      break;
    case 45:return 49
      break;
    case 46:return 83
      break;
    case 47:return 85
      break;
    case 48:return 84
      break;
    case 49:return 86
      break;
    case 50:return 87
      break;
    case 51:return 45
      break;
    case 52:return 78
      break;
    case 53:return 77
      break;
    case 54:yy_.yytext = yy_.yytext.substring(1,yy_.yyleng-1); return "CADENA"
      break;
    case 55:yy_.yytext = yy_.yytext.substring(1,yy_.yyleng-1); return "CHAR"
      break;
    case 56:return 29
      break;
    case 57:
      break;
    case 58:
      break;
    case 59:
      break;
    case 60:
      break;
    case 61:return 5
      break;
    case 62:
    

      break;
        }
    }
}


